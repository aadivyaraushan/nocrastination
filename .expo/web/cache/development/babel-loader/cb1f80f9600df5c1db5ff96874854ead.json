{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useContext, useMemo, useState } from \"react\";\nimport { QuestContext } from \"../QuestContext\";\nimport { useFonts } from \"expo-font\";\nimport { useEffect } from \"react/cjs/react.development\";\nimport * as NavigationBar from \"expo-navigation-bar\";\nimport { setStatusBarHidden, StatusBar } from \"expo-status-bar\";\nimport { UserContext } from \"../UserContext\";\nimport { doc, updateDoc, getFirestore } from \"firebase/firestore\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar QuestActive = function QuestActive(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var rewardData = route.params;\n\n  var _useContext = useContext(UserContext),\n      user = _useContext.user,\n      setUser = _useContext.setUser;\n\n  var db = getFirestore();\n  var potentialBackgrounds = [require(\"../assets/activePage1.png\"), require(\"../assets/activePage2.png\"), require(\"../assets/activePage3.png\")];\n  var background = useMemo(function () {\n    return potentialBackgrounds[Math.floor(Math.random() * potentialBackgrounds.length)];\n  }, []);\n\n  var _useContext2 = useContext(QuestContext),\n      quest = _useContext2.quest,\n      setQuest = _useContext2.setQuest;\n\n  var _useState = useState(quest[\"duration\"]),\n      _useState2 = _slicedToArray(_useState, 2),\n      time = _useState2[0],\n      setTime = _useState2[1];\n\n  var _useFonts = useFonts({\n    RetroGaming: require(\"../assets/fonts/RetroGaming-Regular.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      loaded = _useFonts2[0];\n\n  useEffect(function () {\n    var timeout = setTimeout(function () {\n      setTime(time - 1);\n    }, 1000);\n\n    if (time === 0) {\n      Alert.alert(\"Quest Completed?\", \"Have you completed the quest?\", [{\n        text: \"Yes\",\n        onPress: function onPress() {\n          Alert.alert(\"Quest completed! You will now recieve the rewards.\");\n          tasks.splice(tasks.indexOf(quest), 1);\n          setUser({\n            coins: user[\"coins\"] + rewardData[quest[\"difficulty\"]][\"coins\"],\n            currentXp: user[\"currentXp\"] + rewardData[quest[\"difficulty\"]][\"xp\"],\n            diamonds: user[\"diamonds\"],\n            displayName: user[\"displayName\"],\n            email: user[\"email\"],\n            level: user[\"level\"],\n            multiplier: user[\"multiplier\"],\n            questsDone: user[\"questsDone\"] + 1,\n            avatar: user[\"avatar\"],\n            activeQuest: user[\"activeQuest\"],\n            emotes: user[\"emotes\"],\n            items: user[\"items\"],\n            tasks: user[\"tasks\"]\n          });\n          updateDoc(doc(db, \"users\", user[\"email\"]), {\n            coins: user[\"coins\"] + rewardData[quest[\"difficulty\"]][\"coins\"],\n            currentXp: user[\"currentXp\"] + rewardData[quest[\"difficulty\"]][\"xp\"],\n            tasks: user[\"tasks\"]\n          });\n        }\n      }, {\n        text: \"No\",\n        onPress: function onPress() {\n          Alert.alert(\"You won't be getting the rewards. Good try.\");\n        }\n      }]);\n      setStatusBarHidden(false);\n    }\n\n    return function () {\n      clearTimeout(timeout);\n    };\n  }, []);\n  return _jsx(View, {\n    children: _jsxs(ImageBackground, {\n      style: styles.bg,\n      source: background,\n      onLayout: function _callee() {\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(NavigationBar.setVisibilityAsync(\"hidden\"));\n\n              case 2:\n                _context.next = 4;\n                return _regeneratorRuntime.awrap(setStatusBarHidden(true));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      children: [_jsx(Text, {\n        style: styles.disclaimerText,\n        children: \"PUT THE PHONE DOWN!\"\n      }), _jsx(Text, {\n        style: styles.timerText,\n        children: Math.floor(time / 60) + \":\" + Math.round(time % 60)\n      })]\n    })\n  });\n};\n\nexport default QuestActive;\nvar styles = StyleSheet.create({\n  bg: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"contain\"\n  },\n  disclaimerText: {\n    marginTop: 50,\n    fontSize: 50,\n    textAlign: \"center\",\n    width: \"100%\",\n    color: \"white\",\n    fontFamily: \"RetroGaming\"\n  },\n  timerText: {\n    marginTop: 350,\n    fontSize: 45,\n    textAlign: \"center\",\n    width: \"100%\",\n    color: \"white\",\n    fontFamily: \"RetroGaming\"\n  }\n});","map":{"version":3,"sources":["/home/aadivyaraushan/Documents/GitHub/nocrastination/screens/QuestActive.js"],"names":["useContext","useMemo","useState","QuestContext","useFonts","useEffect","NavigationBar","setStatusBarHidden","StatusBar","UserContext","doc","updateDoc","getFirestore","QuestActive","route","navigation","rewardData","params","user","setUser","db","potentialBackgrounds","require","background","Math","floor","random","length","quest","setQuest","time","setTime","RetroGaming","loaded","timeout","setTimeout","Alert","alert","text","onPress","tasks","splice","indexOf","coins","currentXp","diamonds","displayName","email","level","multiplier","questsDone","avatar","activeQuest","emotes","items","clearTimeout","styles","bg","setVisibilityAsync","disclaimerText","timerText","round","StyleSheet","create","width","height","resizeMode","marginTop","fontSize","textAlign","color","fontFamily"],"mappings":";;;;;;;AACA,SAASA,UAAT,EAAqBC,OAArB,EAA8BC,QAA9B,QAA8C,OAA9C;AACA,SAASC,YAAT;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,OAAO,KAAKC,aAAZ,MAA+B,qBAA/B;AACA,SAASC,kBAAT,EAA6BC,SAA7B,QAA8C,iBAA9C;AACA,SAASC,WAAT;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,YAAzB,QAA6C,oBAA7C;;;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAA2B;AAAA,MAAxBC,KAAwB,QAAxBA,KAAwB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AAC7C,MAAMC,UAAU,GAAGF,KAAK,CAACG,MAAzB;;AACA,oBAA0BjB,UAAU,CAACS,WAAD,CAApC;AAAA,MAAQS,IAAR,eAAQA,IAAR;AAAA,MAAcC,OAAd,eAAcA,OAAd;;AACA,MAAMC,EAAE,GAAGR,YAAY,EAAvB;AAEA,MAAMS,oBAAoB,GAAG,CAC3BC,OAAO,6BADoB,EAE3BA,OAAO,6BAFoB,EAG3BA,OAAO,6BAHoB,CAA7B;AAKA,MAAMC,UAAU,GAAGtB,OAAO,CACxB;AAAA,WACEoB,oBAAoB,CAClBG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,oBAAoB,CAACM,MAAhD,CADkB,CADtB;AAAA,GADwB,EAKxB,EALwB,CAA1B;;AAQA,qBAA4B3B,UAAU,CAACG,YAAD,CAAtC;AAAA,MAAQyB,KAAR,gBAAQA,KAAR;AAAA,MAAeC,QAAf,gBAAeA,QAAf;;AACA,kBAAwB3B,QAAQ,CAAC0B,KAAK,CAAC,UAAD,CAAN,CAAhC;AAAA;AAAA,MAAOE,IAAP;AAAA,MAAaC,OAAb;;AACA,kBAAiB3B,QAAQ,CAAC;AACxB4B,IAAAA,WAAW,EAAEV,OAAO;AADI,GAAD,CAAzB;AAAA;AAAA,MAAOW,MAAP;;AAIA5B,EAAAA,SAAS,CAAC,YAAM;AACd,QAAM6B,OAAO,GAAGC,UAAU,CAAC,YAAM;AAC/BJ,MAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,KAFyB,EAEvB,IAFuB,CAA1B;;AAIA,QAAIA,IAAI,KAAK,CAAb,EAAgB;AACdM,MAAAA,KAAK,CAACC,KAAN,CAAY,kBAAZ,EAAgC,+BAAhC,EAAiE,CAC/D;AACEC,QAAAA,IAAI,EAAE,KADR;AAEEC,QAAAA,OAAO,EAAE,mBAAM;AACbH,UAAAA,KAAK,CAACC,KAAN,CAAY,oDAAZ;AACAG,UAAAA,KAAK,CAACC,MAAN,CAAaD,KAAK,CAACE,OAAN,CAAcd,KAAd,CAAb,EAAmC,CAAnC;AACAT,UAAAA,OAAO,CAAC;AACNwB,YAAAA,KAAK,EAAEzB,IAAI,CAAC,OAAD,CAAJ,GAAgBF,UAAU,CAACY,KAAK,CAAC,YAAD,CAAN,CAAV,CAAgC,OAAhC,CADjB;AAENgB,YAAAA,SAAS,EACP1B,IAAI,CAAC,WAAD,CAAJ,GAAoBF,UAAU,CAACY,KAAK,CAAC,YAAD,CAAN,CAAV,CAAgC,IAAhC,CAHhB;AAINiB,YAAAA,QAAQ,EAAE3B,IAAI,CAAC,UAAD,CAJR;AAKN4B,YAAAA,WAAW,EAAE5B,IAAI,CAAC,aAAD,CALX;AAMN6B,YAAAA,KAAK,EAAE7B,IAAI,CAAC,OAAD,CANL;AAON8B,YAAAA,KAAK,EAAE9B,IAAI,CAAC,OAAD,CAPL;AAQN+B,YAAAA,UAAU,EAAE/B,IAAI,CAAC,YAAD,CARV;AASNgC,YAAAA,UAAU,EAAEhC,IAAI,CAAC,YAAD,CAAJ,GAAqB,CAT3B;AAUNiC,YAAAA,MAAM,EAAEjC,IAAI,CAAC,QAAD,CAVN;AAWNkC,YAAAA,WAAW,EAAElC,IAAI,CAAC,aAAD,CAXX;AAYNmC,YAAAA,MAAM,EAAEnC,IAAI,CAAC,QAAD,CAZN;AAaNoC,YAAAA,KAAK,EAAEpC,IAAI,CAAC,OAAD,CAbL;AAcNsB,YAAAA,KAAK,EAAEtB,IAAI,CAAC,OAAD;AAdL,WAAD,CAAP;AAgBAP,UAAAA,SAAS,CAACD,GAAG,CAACU,EAAD,EAAK,OAAL,EAAcF,IAAI,CAAC,OAAD,CAAlB,CAAJ,EAAkC;AACzCyB,YAAAA,KAAK,EAAEzB,IAAI,CAAC,OAAD,CAAJ,GAAgBF,UAAU,CAACY,KAAK,CAAC,YAAD,CAAN,CAAV,CAAgC,OAAhC,CADkB;AAEzCgB,YAAAA,SAAS,EACP1B,IAAI,CAAC,WAAD,CAAJ,GAAoBF,UAAU,CAACY,KAAK,CAAC,YAAD,CAAN,CAAV,CAAgC,IAAhC,CAHmB;AAIzCY,YAAAA,KAAK,EAAEtB,IAAI,CAAC,OAAD;AAJ8B,WAAlC,CAAT;AAMD;AA3BH,OAD+D,EA8B/D;AACEoB,QAAAA,IAAI,EAAE,IADR;AAEEC,QAAAA,OAAO,EAAE,mBAAM;AACbH,UAAAA,KAAK,CAACC,KAAN,CAAY,6CAAZ;AACD;AAJH,OA9B+D,CAAjE;AAqCA9B,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD;;AACD,WAAO,YAAM;AAEXgD,MAAAA,YAAY,CAACrB,OAAD,CAAZ;AACD,KAHD;AAID,GAjDQ,EAiDN,EAjDM,CAAT;AAmDA,SACE,KAAC,IAAD;AAAA,cACE,MAAC,eAAD;AACE,MAAA,KAAK,EAAEsB,MAAM,CAACC,EADhB;AAEE,MAAA,MAAM,EAAElC,UAFV;AAGE,MAAA,QAAQ,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDACFjB,aAAa,CAACoD,kBAAd,CAAiC,QAAjC,CADE;;AAAA;AAAA;AAAA,iDAEFnD,kBAAkB,CAAC,IAAD,CAFhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAHZ;AAAA,iBAQE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEiD,MAAM,CAACG,cAApB;AAAA;AAAA,QARF,EASE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEH,MAAM,CAACI,SAApB;AAAA,kBACGpC,IAAI,CAACC,KAAL,CAAWK,IAAI,GAAG,EAAlB,IAAwB,GAAxB,GAA8BN,IAAI,CAACqC,KAAL,CAAW/B,IAAI,GAAG,EAAlB;AADjC,QATF;AAAA;AADF,IADF;AAiBD,CA5FD;;AA8FA,eAAejB,WAAf;AAEA,IAAM2C,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,EAAE,EAAE;AACFO,IAAAA,KAAK,EAAE,MADL;AAEFC,IAAAA,MAAM,EAAE,MAFN;AAGFC,IAAAA,UAAU,EAAE;AAHV,GAD2B;AAM/BP,EAAAA,cAAc,EAAE;AACdQ,IAAAA,SAAS,EAAE,EADG;AAEdC,IAAAA,QAAQ,EAAE,EAFI;AAGdC,IAAAA,SAAS,EAAE,QAHG;AAIdL,IAAAA,KAAK,EAAE,MAJO;AAKdM,IAAAA,KAAK,EAAE,OALO;AAMdC,IAAAA,UAAU,EAAE;AANE,GANe;AAgB/BX,EAAAA,SAAS,EAAE;AACTO,IAAAA,SAAS,EAAE,GADF;AAETC,IAAAA,QAAQ,EAAE,EAFD;AAGTC,IAAAA,SAAS,EAAE,QAHF;AAITL,IAAAA,KAAK,EAAE,MAJE;AAKTM,IAAAA,KAAK,EAAE,OALE;AAMTC,IAAAA,UAAU,EAAE;AANH;AAhBoB,CAAlB,CAAf","sourcesContent":["import { StyleSheet, Text, View, ImageBackground, Alert } from \"react-native\";\nimport { useContext, useMemo, useState } from \"react\";\nimport { QuestContext } from \"../QuestContext\";\nimport { useFonts } from \"expo-font\";\nimport { useEffect } from \"react/cjs/react.development\";\nimport * as NavigationBar from \"expo-navigation-bar\";\nimport { setStatusBarHidden, StatusBar } from \"expo-status-bar\";\nimport { UserContext } from \"../UserContext\";\nimport { doc, updateDoc, getFirestore } from \"firebase/firestore\";\n\nconst QuestActive = ({ route, navigation }) => {\n  const rewardData = route.params;\n  const { user, setUser } = useContext(UserContext);\n  const db = getFirestore();\n\n  const potentialBackgrounds = [\n    require(\"../assets/activePage1.png\"),\n    require(\"../assets/activePage2.png\"),\n    require(\"../assets/activePage3.png\"),\n  ];\n  const background = useMemo(\n    () =>\n      potentialBackgrounds[\n        Math.floor(Math.random() * potentialBackgrounds.length)\n      ],\n    []\n  );\n\n  const { quest, setQuest } = useContext(QuestContext);\n  const [time, setTime] = useState(quest[\"duration\"]);\n  const [loaded] = useFonts({\n    RetroGaming: require(\"../assets/fonts/RetroGaming-Regular.ttf\"),\n  });\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setTime(time - 1);\n    }, 1000);\n\n    if (time === 0) {\n      Alert.alert(\"Quest Completed?\", \"Have you completed the quest?\", [\n        {\n          text: \"Yes\",\n          onPress: () => {\n            Alert.alert(\"Quest completed! You will now recieve the rewards.\");\n            tasks.splice(tasks.indexOf(quest), 1);\n            setUser({\n              coins: user[\"coins\"] + rewardData[quest[\"difficulty\"]][\"coins\"],\n              currentXp:\n                user[\"currentXp\"] + rewardData[quest[\"difficulty\"]][\"xp\"],\n              diamonds: user[\"diamonds\"],\n              displayName: user[\"displayName\"],\n              email: user[\"email\"],\n              level: user[\"level\"],\n              multiplier: user[\"multiplier\"],\n              questsDone: user[\"questsDone\"] + 1,\n              avatar: user[\"avatar\"],\n              activeQuest: user[\"activeQuest\"],\n              emotes: user[\"emotes\"],\n              items: user[\"items\"],\n              tasks: user[\"tasks\"],\n            });\n            updateDoc(doc(db, \"users\", user[\"email\"]), {\n              coins: user[\"coins\"] + rewardData[quest[\"difficulty\"]][\"coins\"],\n              currentXp:\n                user[\"currentXp\"] + rewardData[quest[\"difficulty\"]][\"xp\"],\n              tasks: user[\"tasks\"],\n            });\n          },\n        },\n        {\n          text: \"No\",\n          onPress: () => {\n            Alert.alert(\"You won't be getting the rewards. Good try.\");\n          },\n        },\n      ]);\n      setStatusBarHidden(false);\n    }\n    return () => {\n      // alert(\"DONE!\");\n      clearTimeout(timeout);\n    };\n  }, []);\n\n  return (\n    <View>\n      <ImageBackground\n        style={styles.bg}\n        source={background}\n        onLayout={async () => {\n          await NavigationBar.setVisibilityAsync(\"hidden\");\n          await setStatusBarHidden(true);\n        }}\n      >\n        <Text style={styles.disclaimerText}>PUT THE PHONE DOWN!</Text>\n        <Text style={styles.timerText}>\n          {Math.floor(time / 60) + \":\" + Math.round(time % 60)}\n        </Text>\n      </ImageBackground>\n    </View>\n  );\n};\n\nexport default QuestActive;\n\nconst styles = StyleSheet.create({\n  bg: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"contain\",\n  },\n  disclaimerText: {\n    marginTop: 50,\n    fontSize: 50,\n    textAlign: \"center\",\n    width: \"100%\",\n    color: \"white\",\n    fontFamily: \"RetroGaming\",\n\n    // if i is even then it should be to the right else to the left\n  },\n  timerText: {\n    marginTop: 350,\n    fontSize: 45,\n    textAlign: \"center\",\n    width: \"100%\",\n    color: \"white\",\n    fontFamily: \"RetroGaming\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}