{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { useState } from \"react\";\nimport Topbar from \"../components/Topbar.js\";\nimport BottomBar from \"../components/BottomBar.js\";\nimport { useFonts } from \"expo-font\";\nimport { collection, getDocs, getFirestore, query, where } from \"firebase/firestore\";\nimport { useContext, useEffect } from \"react/cjs/react.development\";\nimport { UserContext } from \"../UserContext.js\";\nimport { db } from \"../firebase\";\nimport { doc, updateDoc } from \"@firebase/firestore\";\nimport { Audio } from \"expo-av\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Shop = function Shop() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      sound = _useState2[0],\n      setSound = _useState2[1];\n\n  var _useFonts = useFonts({\n    RetroGaming: require(\"../assets/fonts/RetroGaming-Regular.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      loaded = _useFonts2[0];\n\n  var _useContext = useContext(UserContext),\n      user = _useContext.user,\n      setUser = _useContext.setUser;\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      itemsJSX = _useState4[0],\n      setItemsJSX = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      emotesJSX = _useState6[0],\n      setEmotesJSX = _useState6[1];\n\n  var items = [];\n  var q = query(collection(db, \"shop\"), where(\"levelRequirement\", \"<=\", user[\"level\"]));\n  var emotes = [];\n  var q2 = query(collection(db, \"emotes\"), where(\"levelRequirement\", \"<=\", user[\"level\"]));\n\n  function playPurchaseSound() {\n    var _await$Audio$Sound$cr, sound;\n\n    return _regeneratorRuntime.async(function playPurchaseSound$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Audio.Sound.createAsync(require(\"../assets/sfx/itemPurchase.mp3\")));\n\n          case 2:\n            _await$Audio$Sound$cr = _context.sent;\n            sound = _await$Audio$Sound$cr.sound;\n            setSound(sound);\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(sound.playAsync());\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function playPurchaseFailed() {\n    var _await$Audio$Sound$cr2, sound;\n\n    return _regeneratorRuntime.async(function playPurchaseFailed$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(Audio.Sound.createAsync(require(\"../assets/sfx/purchaseFailed.mp3\")));\n\n          case 2:\n            _await$Audio$Sound$cr2 = _context2.sent;\n            sound = _await$Audio$Sound$cr2.sound;\n            setSound(sound);\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(sound.playAsync());\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    getDocs(q).then(function (querySnapshot) {\n      return querySnapshot.forEach(function (doc) {\n        items.push(doc.data());\n      });\n    }).then(function () {\n      var level = user[\"level\"];\n      setItemsJSX(_jsx(ScrollView, {\n        style: {\n          display: \"flex\",\n          flexDirection: \"row\",\n          flexWrap: \"wrap\",\n          bottom: 90\n        },\n        horizontal: true,\n        children: items.map(function (itemFromArr, index) {\n          var requirement = itemFromArr[\"levelRequirement\"];\n\n          if (requirement > level) {\n            return _jsx(ImageBackground, {\n              style: styles.itemBackground,\n              source: require(\"../assets/lockedBG.png\"),\n              children: _jsxs(Text, {\n                style: styles.itemText,\n                children: [\"Unlocked at level \", requirement, \"!\"]\n              })\n            }, index);\n          } else {\n            var image;\n\n            switch (itemFromArr[\"name\"]) {\n              case \"Laser Eyes\":\n                image = require(\"../assets/laserEyes.png\");\n                break;\n\n              case \"pyrokinesis\":\n                image = require(\"../assets/pyrokinesis.png\");\n                break;\n\n              case \"regeneration\":\n                image = require(\"../assets/regeneration.png\");\n                break;\n\n              case \"shield\":\n                image = require(\"../assets/shield.png\");\n                break;\n\n              case \"sword\":\n                image = require(\"../assets/sword.png\");\n                break;\n\n              case \"telekinesis\":\n                image = require(\"../assets/shopIcon.png\");\n                break;\n            }\n\n            var multiplayerBoost;\n\n            if (itemFromArr[\"type\"] === \"offensive\") {\n              multiplayerBoost = _jsxs(Text, {\n                style: styles.itemFooter,\n                children: [\"+\", itemFromArr[\"damageBoost\"], \" damage\"]\n              });\n            } else if (itemFromArr[\"healthBoost\"] != \"regeneration\") {\n              multiplayerBoost = _jsxs(Text, {\n                style: styles.itemFooter,\n                children: [\"+\", itemFromArr[\"healthBoost\"], \" health\"]\n              });\n            } else {\n              multiplayerBoost = _jsx(Text, {\n                style: styles.itemFooter,\n                children: \"Increasing health\"\n              });\n            }\n\n            return _jsx(ImageBackground, {\n              style: styles.itemBackground,\n              source: require(\"../assets/shopPanel.png\"),\n              children: _jsxs(Pressable, {\n                onPress: function onPress() {\n                  if (user[\"items\"].indexOf(itemFromArr) != -1) {\n                    playPurchaseFailed();\n                    alert(\"You already have this item!\");\n                    return;\n                  } else if (user[\"coins\"] >= itemFromArr[\"priceCoins\"] && user[\"items\"].indexOf(itemFromArr) == -1) {\n                    user[\"items\"].push(itemFromArr);\n                    user[\"coins\"] = user[\"coins\"] - itemFromArr[\"priceCoins\"];\n                    setUser({\n                      activeQuest: user[\"activeQuest\"],\n                      coins: user[\"coins\"],\n                      currentXp: user[\"currentXp\"],\n                      diamonds: user[\"diamonds\"],\n                      displayName: user[\"displayName\"],\n                      email: user[\"email\"],\n                      level: user[\"level\"],\n                      multiplier: user[\"multiplier\"],\n                      questsDone: user[\"questsDone\"],\n                      tasks: user[\"tasks\"],\n                      items: user[\"items\"],\n                      emotes: user[\"emotes\"],\n                      avatar: user[\"avatar\"]\n                    });\n                    updateDoc(doc(db, \"users\", user[\"email\"]), {\n                      coins: user[\"coins\"] - itemFromArr[\"priceCoins\"],\n                      items: user[\"items\"]\n                    });\n                    playPurchaseSound();\n                    alert(\"Item purchased!\");\n                  } else {\n                    playPurchaseFailed();\n                    alert(\"Insufficient funds!\");\n                  }\n                },\n                android_disableSound: true,\n                children: [_jsx(Text, {\n                  style: styles.itemText,\n                  children: itemFromArr[\"name\"]\n                }), _jsx(Image, {\n                  style: styles.itemImage,\n                  source: image\n                }), _jsx(Image, {\n                  style: styles.coinIcon,\n                  source: require(\"../assets/coin.png\")\n                }), _jsx(Text, {\n                  style: styles.itemFooter,\n                  children: itemFromArr[\"priceCoins\"]\n                }), _jsxs(Text, {\n                  style: styles.itemFooter,\n                  children: [itemFromArr[\"multiplierXP\"], \"x XP,\", \" \", itemFromArr[\"multiplierCoins\"], \"x coins\"]\n                }), multiplayerBoost]\n              })\n            }, index);\n          }\n        })\n      }));\n    });\n    getDocs(q2).then(function (querySnapshot) {\n      return querySnapshot.forEach(function (doc) {\n        emotes.push(doc.data());\n      });\n    }).then(function () {\n      var level = user[\"level\"];\n      setEmotesJSX(_jsx(ScrollView, {\n        style: styles.itemsContainer,\n        horizontal: true,\n        children: emotes.map(function (emoteFromArr, index) {\n          var requirement = emoteFromArr[\"levelRequirement\"];\n\n          if (requirement > level) {\n            return _jsx(ImageBackground, {\n              style: styles.itemBackground,\n              source: require(\"../assets/lockedBG.png\"),\n              children: _jsxs(Text, {\n                style: styles.itemText,\n                children: [\"Unlocked at level \", requirement, \"!\"]\n              })\n            }, index);\n          } else {\n            var image;\n\n            switch (emoteFromArr[\"name\"]) {\n              case \"smile\":\n                image = require(\"../assets/smile.png\");\n                break;\n\n              case \"embarrased\":\n                image = require(\"../assets/embarrased.png\");\n                break;\n\n              case \"ROFL\":\n                image = require(\"../assets/rofl.png\");\n                break;\n\n              case \"surprise\":\n                image = require(\"../assets/surprise.png\");\n                break;\n            }\n\n            return _jsx(ImageBackground, {\n              style: styles.itemBackground,\n              source: require(\"../assets/shopPanel.png\"),\n              children: _jsxs(Pressable, {\n                onPress: function onPress() {\n                  if (user[\"diamonds\"] >= emoteFromArr[\"priceDiamonds\"]) {\n                    user[\"emotes\"].push(emoteFromArr);\n                    setUser({\n                      activeQuest: user[\"activeQuest\"],\n                      coins: user[\"coins\"],\n                      currentXp: user[\"currentXp\"],\n                      diamonds: user[\"diamonds\"] - emoteFromArr[\"priceDiamonds\"],\n                      displayName: user[\"displayName\"],\n                      email: user[\"email\"],\n                      level: user[\"level\"],\n                      multiplier: user[\"multiplier\"],\n                      questsDone: user[\"questsDone\"],\n                      tasks: user[\"tasks\"],\n                      emotes: user[\"emotes\"],\n                      items: user[\"items\"],\n                      avatar: user[\"avatar\"]\n                    });\n                    updateDoc(doc(db, \"users\", user[\"email\"]), {\n                      diamonds: user[\"diamonds\"] - emoteFromArr[\"priceDiamonds\"],\n                      emotes: user[\"emotes\"]\n                    });\n                    playPurchaseSound();\n                    alert(\"Emote purchased!\");\n                  } else {\n                    playPurchaseFailed();\n                    alert(\"Insufficient funds!\");\n                  }\n                },\n                children: [_jsx(Text, {\n                  style: styles.itemText,\n                  children: emoteFromArr[\"name\"]\n                }), _jsx(Image, {\n                  style: styles.itemImage,\n                  source: image\n                }), _jsx(Text, {\n                  style: styles.itemFooter,\n                  children: emoteFromArr[\"priceDiamonds\"]\n                }), _jsx(Image, {\n                  style: styles.rubyIcon,\n                  source: require(\"../assets/ruby.png\")\n                })]\n              })\n            }, index);\n          }\n        })\n      }));\n    });\n  }, [].concat(items));\n  return _jsx(View, {\n    style: {\n      flexDirection: \"row\",\n      flexWrap: \"wrap\",\n      flex: 1\n    },\n    children: _jsxs(ImageBackground, {\n      source: require(\"../assets/background.png\"),\n      style: styles.bg,\n      children: [_jsx(Topbar, {}), _jsx(View, {\n        style: styles.banner,\n        children: _jsx(Text, {\n          style: styles.bannerText,\n          children: \"Emotes\"\n        })\n      }), emotesJSX, _jsx(View, {\n        style: styles.itemsBanner,\n        children: _jsx(Text, {\n          style: styles.bannerText,\n          children: \"Weapons/Abilities\"\n        })\n      }), itemsJSX, _jsx(BottomBar, {})]\n    })\n  });\n};\n\nexport default Shop;\nvar styles = StyleSheet.create({\n  bg: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"contain\"\n  },\n  banner: {\n    marginTop: 50,\n    backgroundColor: \"#DD4141\",\n    width: \"100%\"\n  },\n  bannerText: {\n    fontSize: 40,\n    fontFamily: \"RetroGaming\",\n    color: \"white\",\n    textAlign: \"center\"\n  },\n  itemBackground: {\n    width: 150,\n    height: 220,\n    resizeMode: \"contain\",\n    marginRight: 10,\n    marginBottom: 10\n  },\n  itemsContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"wrap\"\n  },\n  itemText: {\n    fontSize: 15,\n    fontFamily: \"RetroGaming\",\n    color: \"white\",\n    textAlign: \"center\"\n  },\n  itemImage: {\n    height: \"40%\",\n    width: \"auto\",\n    resizeMode: \"contain\"\n  },\n  itemFooter: {\n    fontSize: 15,\n    fontFamily: \"RetroGaming\",\n    color: \"white\",\n    textAlign: \"center\"\n  },\n  coinIcon: {\n    resizeMode: \"contain\",\n    width: \"auto\",\n    height: 15,\n    position: \"relative\",\n    right: 20,\n    top: 16\n  },\n  rubyIcon: {\n    resizeMode: \"contain\",\n    width: \"auto\",\n    height: 15,\n    position: \"relative\",\n    right: 25,\n    bottom: 16\n  },\n  itemsBanner: {\n    backgroundColor: \"#DD4141\",\n    width: \"100%\",\n    bottom: 90\n  }\n});","map":{"version":3,"sources":["/home/aadivyaraushan/Documents/GitHub/nocrastination/screens/Shop.js"],"names":["useState","Topbar","BottomBar","useFonts","collection","getDocs","getFirestore","query","where","useContext","useEffect","UserContext","db","doc","updateDoc","Audio","Shop","sound","setSound","RetroGaming","require","loaded","user","setUser","itemsJSX","setItemsJSX","emotesJSX","setEmotesJSX","items","q","emotes","q2","playPurchaseSound","Sound","createAsync","playAsync","playPurchaseFailed","then","querySnapshot","forEach","push","data","level","display","flexDirection","flexWrap","bottom","map","itemFromArr","index","requirement","styles","itemBackground","itemText","image","multiplayerBoost","itemFooter","indexOf","alert","activeQuest","coins","currentXp","diamonds","displayName","email","multiplier","questsDone","tasks","avatar","itemImage","coinIcon","itemsContainer","emoteFromArr","rubyIcon","flex","bg","banner","bannerText","itemsBanner","StyleSheet","create","width","height","resizeMode","marginTop","backgroundColor","fontSize","fontFamily","color","textAlign","marginRight","marginBottom","position","right","top"],"mappings":"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","sourcesContent":["import {\n  StyleSheet,\n  Text,\n  View,\n  Image,\n  ImageBackground,\n  ScrollView,\n  Pressable,\n} from \"react-native\";\nimport { useState } from \"react\";\nimport Topbar from \"../components/Topbar.js\";\nimport BottomBar from \"../components/BottomBar.js\";\nimport { useFonts } from \"expo-font\";\nimport {\n  collection,\n  getDocs,\n  getFirestore,\n  query,\n  where,\n} from \"firebase/firestore\";\nimport { useContext, useEffect } from \"react/cjs/react.development\";\nimport { UserContext } from \"../UserContext.js\";\nimport { db } from \"../firebase\";\nimport { doc, updateDoc } from \"@firebase/firestore\";\nimport { Audio } from \"expo-av\";\n\nconst Shop = () => {\n  const [sound, setSound] = useState();\n  const [loaded] = useFonts({\n    RetroGaming: require(\"../assets/fonts/RetroGaming-Regular.ttf\"),\n  });\n  const { user, setUser } = useContext(UserContext);\n  const [itemsJSX, setItemsJSX] = useState();\n  const [emotesJSX, setEmotesJSX] = useState();\n  const items = [];\n  const q = query(\n    collection(db, \"shop\"),\n    where(\"levelRequirement\", \"<=\", user[\"level\"])\n  );\n  const emotes = [];\n  const q2 = query(\n    collection(db, \"emotes\"),\n    where(\"levelRequirement\", \"<=\", user[\"level\"])\n  );\n\n  async function playPurchaseSound() {\n    const { sound } = await Audio.Sound.createAsync(\n      require(\"../assets/sfx/itemPurchase.mp3\")\n    );\n    setSound(sound);\n    await sound.playAsync();\n  }\n\n  async function playPurchaseFailed() {\n    const { sound } = await Audio.Sound.createAsync(\n      require(\"../assets/sfx/purchaseFailed.mp3\")\n    );\n    setSound(sound);\n\n    await sound.playAsync();\n  }\n\n  useEffect(() => {\n    getDocs(q)\n      .then((querySnapshot) =>\n        querySnapshot.forEach((doc) => {\n          items.push(doc.data());\n        })\n      )\n      .then(() => {\n        const level = user[\"level\"];\n        setItemsJSX(\n          <ScrollView\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              flexWrap: \"wrap\",\n              bottom: 90,\n            }}\n            horizontal={true}\n          >\n            {items.map((itemFromArr, index) => {\n              const requirement = itemFromArr[\"levelRequirement\"];\n              if (requirement > level) {\n                return (\n                  <ImageBackground\n                    style={styles.itemBackground}\n                    source={require(\"../assets/lockedBG.png\")}\n                    key={index}\n                  >\n                    <Text style={styles.itemText}>\n                      Unlocked at level {requirement}!\n                    </Text>\n                  </ImageBackground>\n                );\n              } else {\n                let image;\n                switch (itemFromArr[\"name\"]) {\n                  case \"Laser Eyes\":\n                    image = require(\"../assets/laserEyes.png\");\n                    break;\n                  case \"pyrokinesis\":\n                    image = require(\"../assets/pyrokinesis.png\");\n                    break;\n                  case \"regeneration\":\n                    image = require(\"../assets/regeneration.png\");\n                    break;\n                  case \"shield\":\n                    image = require(\"../assets/shield.png\");\n                    break;\n                  case \"sword\":\n                    image = require(\"../assets/sword.png\");\n                    break;\n                  case \"telekinesis\":\n                    image = require(\"../assets/shopIcon.png\");\n                    break;\n                }\n\n                let multiplayerBoost;\n                if (itemFromArr[\"type\"] === \"offensive\") {\n                  multiplayerBoost = (\n                    <Text style={styles.itemFooter}>\n                      +{itemFromArr[\"damageBoost\"]} damage\n                    </Text>\n                  );\n                } else if (itemFromArr[\"healthBoost\"] != \"regeneration\") {\n                  multiplayerBoost = (\n                    <Text style={styles.itemFooter}>\n                      +{itemFromArr[\"healthBoost\"]} health\n                    </Text>\n                  );\n                } else {\n                  multiplayerBoost = (\n                    <Text style={styles.itemFooter}>Increasing health</Text>\n                  );\n                }\n\n                return (\n                  <ImageBackground\n                    style={styles.itemBackground}\n                    source={require(\"../assets/shopPanel.png\")}\n                    key={index}\n                  >\n                    <Pressable\n                      onPress={() => {\n                        if (user[\"items\"].indexOf(itemFromArr) != -1) {\n                          playPurchaseFailed();\n                          alert(\"You already have this item!\");\n                          return;\n                        } else if (\n                          user[\"coins\"] >= itemFromArr[\"priceCoins\"] &&\n                          user[\"items\"].indexOf(itemFromArr) == -1\n                        ) {\n                          user[\"items\"].push(itemFromArr);\n                          user[\"coins\"] =\n                            user[\"coins\"] - itemFromArr[\"priceCoins\"];\n                          setUser({\n                            activeQuest: user[\"activeQuest\"],\n                            coins: user[\"coins\"],\n                            currentXp: user[\"currentXp\"],\n                            diamonds: user[\"diamonds\"],\n                            displayName: user[\"displayName\"],\n                            email: user[\"email\"],\n                            level: user[\"level\"],\n                            multiplier: user[\"multiplier\"],\n                            questsDone: user[\"questsDone\"],\n                            tasks: user[\"tasks\"],\n                            items: user[\"items\"],\n                            emotes: user[\"emotes\"],\n                            avatar: user[\"avatar\"],\n                          });\n\n                          updateDoc(doc(db, \"users\", user[\"email\"]), {\n                            coins: user[\"coins\"] - itemFromArr[\"priceCoins\"],\n                            items: user[\"items\"],\n                          });\n\n                          playPurchaseSound();\n                          alert(\"Item purchased!\");\n                        } else {\n                          playPurchaseFailed();\n                          alert(\"Insufficient funds!\");\n                        }\n                      }}\n                      android_disableSound={true}\n                    >\n                      <Text style={styles.itemText}>{itemFromArr[\"name\"]}</Text>\n                      <Image style={styles.itemImage} source={image}></Image>\n                      <Image\n                        style={styles.coinIcon}\n                        source={require(\"../assets/coin.png\")}\n                      />\n                      <Text style={styles.itemFooter}>\n                        {itemFromArr[\"priceCoins\"]}\n                      </Text>\n                      <Text style={styles.itemFooter}>\n                        {itemFromArr[\"multiplierXP\"]}x XP,{\" \"}\n                        {itemFromArr[\"multiplierCoins\"]}x coins\n                      </Text>\n                      {multiplayerBoost}\n                    </Pressable>\n                  </ImageBackground>\n                );\n              }\n            })}\n          </ScrollView>\n        );\n      });\n\n    getDocs(q2)\n      .then((querySnapshot) =>\n        querySnapshot.forEach((doc) => {\n          emotes.push(doc.data());\n        })\n      )\n      .then(() => {\n        const level = user[\"level\"];\n        setEmotesJSX(\n          <ScrollView style={styles.itemsContainer} horizontal={true}>\n            {emotes.map((emoteFromArr, index) => {\n              const requirement = emoteFromArr[\"levelRequirement\"];\n              if (requirement > level) {\n                return (\n                  <ImageBackground\n                    style={styles.itemBackground}\n                    source={require(\"../assets/lockedBG.png\")}\n                    key={index}\n                  >\n                    <Text style={styles.itemText}>\n                      Unlocked at level {requirement}!\n                    </Text>\n                  </ImageBackground>\n                );\n              } else {\n                let image;\n                switch (emoteFromArr[\"name\"]) {\n                  case \"smile\":\n                    image = require(\"../assets/smile.png\");\n                    break;\n                  case \"embarrased\":\n                    image = require(\"../assets/embarrased.png\");\n                    break;\n                  case \"ROFL\":\n                    image = require(\"../assets/rofl.png\");\n                    break;\n                  case \"surprise\":\n                    image = require(\"../assets/surprise.png\");\n                    break;\n                }\n\n                return (\n                  <ImageBackground\n                    style={styles.itemBackground}\n                    source={require(\"../assets/shopPanel.png\")}\n                    key={index}\n                  >\n                    <Pressable\n                      onPress={() => {\n                        if (user[\"diamonds\"] >= emoteFromArr[\"priceDiamonds\"]) {\n                          user[\"emotes\"].push(emoteFromArr);\n                          setUser({\n                            activeQuest: user[\"activeQuest\"],\n                            coins: user[\"coins\"],\n                            currentXp: user[\"currentXp\"],\n                            diamonds:\n                              user[\"diamonds\"] - emoteFromArr[\"priceDiamonds\"],\n                            displayName: user[\"displayName\"],\n                            email: user[\"email\"],\n                            level: user[\"level\"],\n                            multiplier: user[\"multiplier\"],\n                            questsDone: user[\"questsDone\"],\n                            tasks: user[\"tasks\"],\n                            emotes: user[\"emotes\"],\n                            items: user[\"items\"],\n                            avatar: user[\"avatar\"],\n                          });\n\n                          updateDoc(doc(db, \"users\", user[\"email\"]), {\n                            diamonds:\n                              user[\"diamonds\"] - emoteFromArr[\"priceDiamonds\"],\n                            emotes: user[\"emotes\"],\n                          });\n                          playPurchaseSound();\n                          alert(\"Emote purchased!\");\n                        } else {\n                          playPurchaseFailed();\n                          alert(\"Insufficient funds!\");\n                        }\n                      }}\n                    >\n                      <Text style={styles.itemText}>\n                        {emoteFromArr[\"name\"]}\n                      </Text>\n                      <Image style={styles.itemImage} source={image}></Image>\n                      <Text style={styles.itemFooter}>\n                        {emoteFromArr[\"priceDiamonds\"]}\n                      </Text>\n                      <Image\n                        style={styles.rubyIcon}\n                        source={require(\"../assets/ruby.png\")}\n                      />\n                    </Pressable>\n                  </ImageBackground>\n                );\n              }\n            })}\n          </ScrollView>\n        );\n      });\n  }, [...items]);\n  return (\n    <View style={{ flexDirection: \"row\", flexWrap: \"wrap\", flex: 1 }}>\n      <ImageBackground\n        source={require(\"../assets/background.png\")}\n        style={styles.bg}\n      >\n        <Topbar />\n        <View style={styles.banner}>\n          <Text style={styles.bannerText}>Emotes</Text>\n        </View>\n        {emotesJSX}\n        <View style={styles.itemsBanner}>\n          <Text style={styles.bannerText}>Weapons/Abilities</Text>\n        </View>\n        {itemsJSX}\n\n        <BottomBar />\n      </ImageBackground>\n    </View>\n  );\n};\nexport default Shop;\nconst styles = StyleSheet.create({\n  bg: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"contain\",\n  },\n  banner: {\n    marginTop: 50,\n    backgroundColor: \"#DD4141\",\n    width: \"100%\",\n  },\n  bannerText: {\n    fontSize: 40,\n    fontFamily: \"RetroGaming\",\n    color: \"white\",\n    textAlign: \"center\",\n  },\n  itemBackground: {\n    width: 150,\n    height: 220,\n    resizeMode: \"contain\",\n    marginRight: 10,\n    marginBottom: 10,\n  },\n  itemsContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n  },\n  itemText: {\n    fontSize: 15,\n    fontFamily: \"RetroGaming\",\n    color: \"white\",\n    textAlign: \"center\",\n  },\n  itemImage: {\n    height: \"40%\",\n    width: \"auto\",\n    resizeMode: \"contain\",\n  },\n  itemFooter: {\n    fontSize: 15,\n    fontFamily: \"RetroGaming\",\n    color: \"white\",\n    textAlign: \"center\",\n  },\n  coinIcon: {\n    resizeMode: \"contain\",\n    width: \"auto\",\n    height: 15,\n    position: \"relative\",\n    right: 20,\n    top: 16,\n  },\n  rubyIcon: {\n    resizeMode: \"contain\",\n    width: \"auto\",\n    height: 15,\n    position: \"relative\",\n    right: 25,\n    bottom: 16,\n  },\n  itemsBanner: {\n    backgroundColor: \"#DD4141\",\n    width: \"100%\",\n    bottom: 90,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}