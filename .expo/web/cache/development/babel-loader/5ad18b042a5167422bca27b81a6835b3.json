{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport React, { useState } from \"react\";\nimport Topbar from \"../components/Topbar\";\nimport BottomBar from \"../components/BottomBar\";\nimport { useContext, useEffect } from \"react/cjs/react.development\";\nimport { collection, doc, getDocs, query, QuerySnapshot, updateDoc, where } from \"@firebase/firestore\";\nimport { db } from \"../firebase\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { UserContext } from \"../UserContext\";\nimport { GameContext } from \"../GameContext\";\nimport { Audio } from \"expo-av\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar LoadingMatchmaking = function LoadingMatchmaking(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(UserContext),\n      user = _useContext.user,\n      setUser = _useContext.setUser;\n\n  var _useContext2 = useContext(GameContext),\n      game = _useContext2.game,\n      setGame = _useContext2.setGame;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      gamesJSX = _useState2[0],\n      setGamesJSX = _useState2[1];\n\n  var games = [];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      sound = _useState4[0],\n      setSound = _useState4[1];\n\n  function playSelect() {\n    var _await$Audio$Sound$cr, sound;\n\n    return _regeneratorRuntime.async(function playSelect$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Audio.Sound.createAsync(require(\"../assets/sfx/tap2.mp3\")));\n\n          case 2:\n            _await$Audio$Sound$cr = _context.sent;\n            sound = _await$Audio$Sound$cr.sound;\n            setSound(sound);\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(sound.playAsync());\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function playAdd() {\n    var _await$Audio$Sound$cr2, sound;\n\n    return _regeneratorRuntime.async(function playAdd$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(Audio.Sound.createAsync(require(\"../assets/sfx/tap1.mp3\")));\n\n          case 2:\n            _await$Audio$Sound$cr2 = _context2.sent;\n            sound = _await$Audio$Sound$cr2.sound;\n            setSound(sound);\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(sound.playAsync());\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var pressHandler = function pressHandler(gameFromGames) {\n    updateDoc(doc(db, \"games\", gameFromGames[\"id\"]), {\n      player2: user\n    }).then(function () {\n      setGame({\n        created: gameFromGames[\"created\"],\n        finished: gameFromGames[\"finished\"],\n        id: gameFromGames[\"id\"],\n        player1: gameFromGames[\"player1\"],\n        player2: user,\n        started: gameFromGames[\"started\"]\n      });\n    }).then(function () {\n      playSelect();\n      navigation.navigate(\"multiplayerBattle\");\n    });\n  };\n\n  useEffect(function () {\n    getDocs(query(collection(db, \"games\"), where(\"player2\", \"==\", null))).then(function (querySnapshot) {\n      querySnapshot.forEach(function (doc) {\n        games.push(doc.data());\n      });\n    }).then(function () {\n      setGamesJSX(_jsx(View, {\n        style: styles.gamesContainer,\n        children: games.map(function (gameFromGames, index) {\n          if (gameFromGames[\"player1\"][\"activeQuest\"][\"difficulty\"] === user[\"activeQuest\"][\"difficulty\"] && gameFromGames[\"player1\"][\"level\"] === user[\"level\"]) {\n            return _jsx(ImageBackground, {\n              source: require(\"../assets/organisationBG.png\"),\n              style: styles.gameBackground,\n              children: _jsxs(Pressable, {\n                onPress: function onPress() {\n                  return pressHandler(gameFromGames);\n                },\n                style: styles.gamePressable,\n                children: [_jsxs(Text, {\n                  style: styles.gameText,\n                  children: [\"Game \", index + 1]\n                }), _jsxs(Text, {\n                  style: styles.gameDetails,\n                  children: [\"Against: \", gameFromGames[\"player1\"][\"displayName\"]]\n                }), _jsxs(Text, {\n                  style: styles.gameDetails,\n                  children: [\"Level: \", gameFromGames[\"player1\"][\"level\"], \",\", \" \"]\n                }), _jsxs(Text, {\n                  style: styles.gameDetails,\n                  children: [gameFromGames[\"player1\"][\"items\"].length, \" items\"]\n                })]\n              }, index)\n            }, Math.random() * index);\n          }\n        })\n      }));\n    });\n  }, []);\n  return _jsx(View, {\n    children: _jsxs(ImageBackground, {\n      source: require(\"../assets/background.png\"),\n      style: styles.bg,\n      children: [_jsx(Topbar, {}), _jsx(View, {\n        style: styles.banner,\n        children: _jsx(Text, {\n          style: styles.bannerText,\n          children: \"Battle\"\n        })\n      }), gamesJSX, _jsx(Pressable, {\n        style: styles.addGameButton,\n        onPress: function onPress() {\n          playAdd();\n          navigation.navigate(\"addGame\");\n        },\n        android_disableSound: true,\n        children: _jsx(Image, {\n          source: require(\"../assets/addGame.png\"),\n          style: styles.addGameImage\n        })\n      }), _jsx(BottomBar, {})]\n    })\n  });\n};\n\nexport default LoadingMatchmaking;\nvar styles = StyleSheet.create({\n  bg: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"contain\",\n    display: \"flex\"\n  },\n  text: {\n    fontSize: 25,\n    textAlign: \"center\",\n    width: \"100%\",\n    color: \"white\",\n    fontFamily: \"RetroGaming\",\n    alignSelf: \"center\"\n  },\n  banner: {\n    marginTop: 50,\n    backgroundColor: \"#DD4141\",\n    width: \"100%\"\n  },\n  bannerText: {\n    fontSize: 40,\n    fontFamily: \"RetroGaming\",\n    color: \"white\",\n    textAlign: \"center\"\n  },\n  container: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"100%\",\n    height: \"70%\"\n  },\n  gamesContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\"\n  },\n  gameBackground: {\n    width: 380,\n    height: 120,\n    resizeMode: \"contain\",\n    margin: 20,\n    padding: 10\n  },\n  gamePressable: {},\n  gameText: {\n    fontSize: 30,\n    fontFamily: \"RetroGaming\",\n    color: \"white\",\n    textAlign: \"center\"\n  },\n  gameDetails: {\n    fontSize: 15,\n    fontFamily: \"RetroGaming\",\n    color: \"white\",\n    textAlign: \"left\"\n  },\n  addGameButton: {\n    width: 80,\n    height: 80,\n    position: \"absolute\",\n    bottom: 90,\n    right: 10,\n    zIndex: 2\n  },\n  addGameImage: {\n    width: 80,\n    height: 80\n  }\n});","map":{"version":3,"sources":["/home/aadivyaraushan/Documents/GitHub/nocrastination/screens/MatchmakingSelect.js"],"names":["React","useState","Topbar","BottomBar","useContext","useEffect","collection","doc","getDocs","query","QuerySnapshot","updateDoc","where","db","NavigationContainer","UserContext","GameContext","Audio","LoadingMatchmaking","navigation","user","setUser","game","setGame","gamesJSX","setGamesJSX","games","sound","setSound","playSelect","Sound","createAsync","require","playAsync","playAdd","pressHandler","gameFromGames","player2","then","created","finished","id","player1","started","navigate","querySnapshot","forEach","push","data","styles","gamesContainer","map","index","gameBackground","gamePressable","gameText","gameDetails","length","Math","random","bg","banner","bannerText","addGameButton","addGameImage","StyleSheet","create","width","height","resizeMode","display","text","fontSize","textAlign","color","fontFamily","alignSelf","marginTop","backgroundColor","container","justifyContent","alignItems","flexDirection","margin","padding","position","bottom","right","zIndex"],"mappings":"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","sourcesContent":["import {\n  ActivityIndicator,\n  ImageBackground,\n  Pressable,\n  StyleSheet,\n  Text,\n  View,\n  Image,\n} from \"react-native\";\nimport React, { useState } from \"react\";\nimport Topbar from \"../components/Topbar\";\nimport BottomBar from \"../components/BottomBar\";\nimport { useContext, useEffect } from \"react/cjs/react.development\";\nimport {\n  collection,\n  doc,\n  getDocs,\n  query,\n  QuerySnapshot,\n  updateDoc,\n  where,\n} from \"@firebase/firestore\";\nimport { db } from \"../firebase\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { UserContext } from \"../UserContext\";\nimport { GameContext } from \"../GameContext\";\nimport { Audio } from \"expo-av\";\n\nconst LoadingMatchmaking = ({ navigation }) => {\n  const { user, setUser } = useContext(UserContext);\n  const { game, setGame } = useContext(GameContext);\n  const [gamesJSX, setGamesJSX] = useState();\n  const games = [];\n  const [sound, setSound] = useState();\n\n  async function playSelect() {\n    const { sound } = await Audio.Sound.createAsync(\n      require(\"../assets/sfx/tap2.mp3\")\n    );\n    setSound(sound);\n    await sound.playAsync();\n  }\n  async function playAdd() {\n    const { sound } = await Audio.Sound.createAsync(\n      require(\"../assets/sfx/tap1.mp3\")\n    );\n    setSound(sound);\n    await sound.playAsync();\n  }\n\n  const pressHandler = (gameFromGames) => {\n    updateDoc(doc(db, \"games\", gameFromGames[\"id\"]), {\n      player2: user,\n    })\n      .then(() => {\n        setGame({\n          created: gameFromGames[\"created\"],\n          finished: gameFromGames[\"finished\"],\n          id: gameFromGames[\"id\"],\n          player1: gameFromGames[\"player1\"],\n          player2: user,\n          started: gameFromGames[\"started\"],\n        });\n      })\n      .then(() => {\n        playSelect();\n        navigation.navigate(\"multiplayerBattle\");\n      });\n  };\n\n  useEffect(() => {\n    getDocs(query(collection(db, \"games\"), where(\"player2\", \"==\", null)))\n      .then((querySnapshot) => {\n        querySnapshot.forEach((doc) => {\n          games.push(doc.data());\n        });\n      })\n      .then(() => {\n        setGamesJSX(\n          <View style={styles.gamesContainer}>\n            {games.map((gameFromGames, index) => {\n              if (\n                gameFromGames[\"player1\"][\"activeQuest\"][\"difficulty\"] ===\n                  user[\"activeQuest\"][\"difficulty\"] &&\n                gameFromGames[\"player1\"][\"level\"] === user[\"level\"]\n              ) {\n                return (\n                  <ImageBackground\n                    source={require(\"../assets/organisationBG.png\")}\n                    style={styles.gameBackground}\n                    key={Math.random() * index}\n                  >\n                    <Pressable\n                      onPress={() => pressHandler(gameFromGames)}\n                      key={index}\n                      style={styles.gamePressable}\n                    >\n                      <Text style={styles.gameText}>Game {index + 1}</Text>\n                      <Text style={styles.gameDetails}>\n                        Against: {gameFromGames[\"player1\"][\"displayName\"]}\n                      </Text>\n                      <Text style={styles.gameDetails}>\n                        Level: {gameFromGames[\"player1\"][\"level\"]},{\" \"}\n                      </Text>\n                      <Text style={styles.gameDetails}>\n                        {gameFromGames[\"player1\"][\"items\"].length} items\n                      </Text>\n                    </Pressable>\n                  </ImageBackground>\n                );\n              }\n            })}\n          </View>\n        );\n      });\n  }, []);\n\n  return (\n    <View>\n      <ImageBackground\n        source={require(\"../assets/background.png\")}\n        style={styles.bg}\n      >\n        <Topbar />\n        <View style={styles.banner}>\n          <Text style={styles.bannerText}>Battle</Text>\n        </View>\n        {gamesJSX}\n        <Pressable\n          style={styles.addGameButton}\n          onPress={() => {\n            playAdd();\n            navigation.navigate(\"addGame\");\n          }}\n          android_disableSound={true}\n        >\n          <Image\n            source={require(\"../assets/addGame.png\")}\n            style={styles.addGameImage}\n          />\n        </Pressable>\n        <BottomBar />\n      </ImageBackground>\n    </View>\n  );\n};\n\nexport default LoadingMatchmaking;\n\nconst styles = StyleSheet.create({\n  bg: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"contain\",\n    display: \"flex\",\n  },\n  text: {\n    fontSize: 25,\n    textAlign: \"center\",\n    width: \"100%\",\n    color: \"white\",\n    fontFamily: \"RetroGaming\",\n    alignSelf: \"center\",\n  },\n  banner: {\n    marginTop: 50,\n    backgroundColor: \"#DD4141\",\n    width: \"100%\",\n  },\n  bannerText: {\n    fontSize: 40,\n    fontFamily: \"RetroGaming\",\n    color: \"white\",\n    textAlign: \"center\",\n  },\n  container: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"100%\",\n    height: \"70%\",\n  },\n  gamesContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n  },\n  gameBackground: {\n    width: 380,\n    height: 120,\n    resizeMode: \"contain\",\n    margin: 20,\n    padding: 10,\n  },\n  gamePressable: {},\n  gameText: {\n    fontSize: 30,\n    fontFamily: \"RetroGaming\",\n    color: \"white\",\n    textAlign: \"center\",\n  },\n  gameDetails: {\n    fontSize: 15,\n    fontFamily: \"RetroGaming\",\n    color: \"white\",\n    textAlign: \"left\",\n  },\n  addGameButton: {\n    width: 80,\n    height: 80,\n    position: \"absolute\",\n    bottom: 90,\n    right: 10,\n    zIndex: 2,\n  },\n  addGameImage: {\n    width: 80,\n    height: 80,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}