{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\nimport { useEffect, useState } from 'react';\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport ExpoNavigationBar from \"./ExpoNavigationBar\";\n\nvar _emitter;\n\nfunction getEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter(ExpoNavigationBar);\n  }\n\n  return _emitter;\n}\n\nexport function addVisibilityListener(listener) {\n  if (!ExpoNavigationBar.addListener) {\n    throw new UnavailabilityError('NavigationBar', 'addVisibilityListener');\n  }\n\n  return getEmitter().addListener('ExpoNavigationBar.didChange', listener);\n}\nexport function setBackgroundColorAsync(color) {\n  var colorNumber;\n  return _regeneratorRuntime.async(function setBackgroundColorAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(Platform.OS !== 'android')) {\n            _context.next = 3;\n            break;\n          }\n\n          console.warn('`setBackgroundColorAsync` is only available on Android');\n          return _context.abrupt(\"return\");\n\n        case 3:\n          colorNumber = processColor(color);\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(ExpoNavigationBar.setBackgroundColorAsync(colorNumber));\n\n        case 6:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getBackgroundColorAsync() {\n  return _regeneratorRuntime.async(function getBackgroundColorAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(Platform.OS !== 'android')) {\n            _context2.next = 3;\n            break;\n          }\n\n          console.warn('`getBackgroundColorAsync` is only available on Android');\n          return _context2.abrupt(\"return\", \"#00000000\");\n\n        case 3:\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(ExpoNavigationBar.getBackgroundColorAsync());\n\n        case 5:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setBorderColorAsync(color) {\n  var colorNumber;\n  return _regeneratorRuntime.async(function setBorderColorAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!(Platform.OS !== 'android')) {\n            _context3.next = 3;\n            break;\n          }\n\n          console.warn('`setBorderColorAsync` is only available on Android');\n          return _context3.abrupt(\"return\");\n\n        case 3:\n          colorNumber = processColor(color);\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(ExpoNavigationBar.setBorderColorAsync(colorNumber));\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getBorderColorAsync() {\n  return _regeneratorRuntime.async(function getBorderColorAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!(Platform.OS !== 'android')) {\n            _context4.next = 3;\n            break;\n          }\n\n          console.warn('`getBorderColorAsync` is only available on Android');\n          return _context4.abrupt(\"return\", \"#00000000\");\n\n        case 3:\n          _context4.next = 5;\n          return _regeneratorRuntime.awrap(ExpoNavigationBar.getBorderColorAsync());\n\n        case 5:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setVisibilityAsync(visibility) {\n  return _regeneratorRuntime.async(function setVisibilityAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (!(Platform.OS !== 'android')) {\n            _context5.next = 3;\n            break;\n          }\n\n          console.warn('`setVisibilityAsync` is only available on Android');\n          return _context5.abrupt(\"return\");\n\n        case 3:\n          _context5.next = 5;\n          return _regeneratorRuntime.awrap(ExpoNavigationBar.setVisibilityAsync(visibility));\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getVisibilityAsync() {\n  return _regeneratorRuntime.async(function getVisibilityAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (!(Platform.OS !== 'android')) {\n            _context6.next = 3;\n            break;\n          }\n\n          console.warn('`getVisibilityAsync` is only available on Android');\n          return _context6.abrupt(\"return\", 'hidden');\n\n        case 3:\n          return _context6.abrupt(\"return\", ExpoNavigationBar.getVisibilityAsync());\n\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setButtonStyleAsync(style) {\n  return _regeneratorRuntime.async(function setButtonStyleAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (!(Platform.OS !== 'android')) {\n            _context7.next = 3;\n            break;\n          }\n\n          console.warn('`setButtonStyleAsync` is only available on Android');\n          return _context7.abrupt(\"return\");\n\n        case 3:\n          _context7.next = 5;\n          return _regeneratorRuntime.awrap(ExpoNavigationBar.setButtonStyleAsync(style));\n\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getButtonStyleAsync() {\n  return _regeneratorRuntime.async(function getButtonStyleAsync$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          if (!(Platform.OS !== 'android')) {\n            _context8.next = 3;\n            break;\n          }\n\n          console.warn('`getButtonStyleAsync` is only available on Android');\n          return _context8.abrupt(\"return\", 'light');\n\n        case 3:\n          _context8.next = 5;\n          return _regeneratorRuntime.awrap(ExpoNavigationBar.getButtonStyleAsync());\n\n        case 5:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 6:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setPositionAsync(position) {\n  return _regeneratorRuntime.async(function setPositionAsync$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          if (!(Platform.OS !== 'android')) {\n            _context9.next = 3;\n            break;\n          }\n\n          console.warn('`setPositionAsync` is only available on Android');\n          return _context9.abrupt(\"return\");\n\n        case 3:\n          _context9.next = 5;\n          return _regeneratorRuntime.awrap(ExpoNavigationBar.setPositionAsync(position));\n\n        case 5:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function unstable_getPositionAsync() {\n  return _regeneratorRuntime.async(function unstable_getPositionAsync$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          if (!(Platform.OS !== 'android')) {\n            _context10.next = 3;\n            break;\n          }\n\n          console.warn('`unstable_getPositionAsync` is only available on Android');\n          return _context10.abrupt(\"return\", 'relative');\n\n        case 3:\n          _context10.next = 5;\n          return _regeneratorRuntime.awrap(ExpoNavigationBar.unstable_getPositionAsync());\n\n        case 5:\n          return _context10.abrupt(\"return\", _context10.sent);\n\n        case 6:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setBehaviorAsync(behavior) {\n  return _regeneratorRuntime.async(function setBehaviorAsync$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          if (!(Platform.OS !== 'android')) {\n            _context11.next = 3;\n            break;\n          }\n\n          console.warn('`setBehaviorAsync` is only available on Android');\n          return _context11.abrupt(\"return\");\n\n        case 3:\n          _context11.next = 5;\n          return _regeneratorRuntime.awrap(ExpoNavigationBar.setBehaviorAsync(behavior));\n\n        case 5:\n          return _context11.abrupt(\"return\", _context11.sent);\n\n        case 6:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getBehaviorAsync() {\n  return _regeneratorRuntime.async(function getBehaviorAsync$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          if (!(Platform.OS !== 'android')) {\n            _context12.next = 3;\n            break;\n          }\n\n          console.warn('`getBehaviorAsync` is only available on Android');\n          return _context12.abrupt(\"return\", 'inset-touch');\n\n        case 3:\n          _context12.next = 5;\n          return _regeneratorRuntime.awrap(ExpoNavigationBar.getBehaviorAsync());\n\n        case 5:\n          return _context12.abrupt(\"return\", _context12.sent);\n\n        case 6:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function useVisibility() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      visibility = _useState2[0],\n      setVisible = _useState2[1];\n\n  useEffect(function () {\n    var isMounted = true;\n\n    if (Platform.OS !== 'android') {\n      setVisible('hidden');\n      return;\n    }\n\n    getVisibilityAsync().then(function (visibility) {\n      if (isMounted) {\n        setVisible(visibility);\n      }\n    });\n    var listener = addVisibilityListener(function (_ref) {\n      var visibility = _ref.visibility;\n\n      if (isMounted) {\n        setVisible(visibility);\n      }\n    });\n    return function () {\n      listener.remove();\n      isMounted = false;\n    };\n  }, []);\n  return visibility;\n}\nexport * from \"./NavigationBar.types\";","map":{"version":3,"sources":["../src/NavigationBar.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Platform, Subscription, UnavailabilityError } from 'expo-modules-core';\nimport { useEffect, useState } from 'react';\nimport { ColorValue, processColor } from 'react-native';\n\nimport ExpoNavigationBar from './ExpoNavigationBar';\nimport {\n  NavigationBarButtonStyle,\n  NavigationBarBehavior,\n  NavigationBarPosition,\n  NavigationBarVisibility,\n  NavigationBarVisibilityEvent,\n} from './NavigationBar.types';\n\nlet _emitter: EventEmitter;\n\n// Lazily initialize the event emitter because it isn't available on iOS,\n// this enables us to use the same code for all platforms.\nfunction getEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter(ExpoNavigationBar);\n  }\n  return _emitter;\n}\n\n/**\n * Observe changes to the system navigation bar.\n * Due to platform constraints, this callback will also be triggered when the status bar visibility changes.\n *\n * @example\n * ```ts\n * NavigationBar.addVisibilityListener(({ visibility }) => {\n *   // ...\n * });\n * ```\n */\nexport function addVisibilityListener(\n  listener: (event: NavigationBarVisibilityEvent) => void\n): Subscription {\n  // Assert so the type is non-nullable.\n  if (!ExpoNavigationBar.addListener) {\n    throw new UnavailabilityError('NavigationBar', 'addVisibilityListener');\n  }\n  return getEmitter().addListener('ExpoNavigationBar.didChange', listener);\n}\n\n/**\n * Changes the navigation bar's background color.\n *\n * @example\n * ```ts\n * NavigationBar.setBackgroundColorAsync(\"white\");\n * ```\n * @param color Any valid [CSS 3 (SVG) color](http://www.w3.org/TR/css3-color/#svg-color).\n */\nexport async function setBackgroundColorAsync(color: ColorValue): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setBackgroundColorAsync` is only available on Android');\n    return;\n  }\n  const colorNumber = processColor(color);\n  return await ExpoNavigationBar.setBackgroundColorAsync(colorNumber);\n}\n\n/**\n * Gets the navigation bar's background color.\n *\n * @example\n * ```ts\n * const color = await NavigationBar.getBackgroundColorAsync();\n * ```\n * @returns Current navigation bar color in hex format. Returns `#00000000` (transparent) on unsupported platforms (iOS, web).\n */\nexport async function getBackgroundColorAsync(): Promise<ColorValue> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getBackgroundColorAsync` is only available on Android');\n    return `#00000000`;\n  }\n  return await ExpoNavigationBar.getBackgroundColorAsync();\n}\n\n/**\n * Changes the navigation bar's border color.\n *\n * @example\n * ```ts\n * NavigationBar.setBorderColorAsync(\"red\");\n * ```\n * @param color Any valid [CSS 3 (SVG) color](http://www.w3.org/TR/css3-color/#svg-color).\n */\nexport async function setBorderColorAsync(color: ColorValue): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setBorderColorAsync` is only available on Android');\n    return;\n  }\n  const colorNumber = processColor(color);\n  await ExpoNavigationBar.setBorderColorAsync(colorNumber);\n}\n\n/**\n * Gets the navigation bar's top border color, also known as the \"divider color\".\n *\n * @example\n * ```ts\n * const color = await NavigationBar.getBorderColorAsync();\n * ```\n * @returns Navigation bar top border color in hex format. Returns `#00000000` (transparent) on unsupported platforms (iOS, web).\n */\nexport async function getBorderColorAsync(): Promise<ColorValue> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getBorderColorAsync` is only available on Android');\n    return `#00000000`;\n  }\n\n  return await ExpoNavigationBar.getBorderColorAsync();\n}\n\n/**\n * Set the navigation bar's visibility.\n *\n * @example\n * ```ts\n * NavigationBar.setVisibilityAsync(\"hidden\");\n * ```\n * @param color Based on CSS visibility property.\n */\nexport async function setVisibilityAsync(visibility: NavigationBarVisibility): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setVisibilityAsync` is only available on Android');\n    return;\n  }\n  await ExpoNavigationBar.setVisibilityAsync(visibility);\n}\n\n/**\n * Get the navigation bar's visibility.\n *\n * @example\n * ```ts\n * const visibility = await NavigationBar.getVisibilityAsync(\"hidden\");\n * ```\n * @returns Navigation bar's current visibility status. Returns `hidden` on unsupported platforms (iOS, web).\n */\nexport async function getVisibilityAsync(): Promise<NavigationBarVisibility> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getVisibilityAsync` is only available on Android');\n    return 'hidden';\n  }\n  return ExpoNavigationBar.getVisibilityAsync();\n}\n\n/**\n * Changes the navigation bar's button colors between white (`light`) and a dark gray color (`dark`).\n *\n * @example\n * ```ts\n * NavigationBar.setButtonStyleAsync(\"light\");\n * ```\n * @param style Dictates the color of the foreground element color.\n */\nexport async function setButtonStyleAsync(style: NavigationBarButtonStyle): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setButtonStyleAsync` is only available on Android');\n    return;\n  }\n  await ExpoNavigationBar.setButtonStyleAsync(style);\n}\n\n/**\n * Gets the navigation bar's button color styles.\n *\n * @example\n * ```ts\n * const style = await NavigationBar.getButtonStyleAsync();\n * ```\n * @returns Navigation bar foreground element color settings. Returns `light` on unsupported platforms (iOS, web).\n */\nexport async function getButtonStyleAsync(): Promise<NavigationBarButtonStyle> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getButtonStyleAsync` is only available on Android');\n    return 'light';\n  }\n  return await ExpoNavigationBar.getButtonStyleAsync();\n}\n\n/**\n * Sets positioning method used for the navigation bar (and status bar).\n * Setting position `absolute` will float the navigation bar above the content,\n * whereas position `relative` will shrink the screen to inline the navigation bar.\n *\n * When drawing behind the status and navigation bars, ensure the safe area insets are adjusted accordingly.\n *\n * @example\n * ```ts\n * // enables edge-to-edge mode\n * await NavigationBar.setPositionAsync('absolute')\n * // transparent backgrounds to see through\n * await NavigationBar.setBackgroundColorAsync('#ffffff00')\n * ```\n * @param position Based on CSS position property.\n */\nexport async function setPositionAsync(position: NavigationBarPosition): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setPositionAsync` is only available on Android');\n    return;\n  }\n  await ExpoNavigationBar.setPositionAsync(position);\n}\n\n/**\n * Whether the navigation and status bars float above the app (absolute) or sit inline with it (relative).\n * This value can be incorrect if `androidNavigationBar.visible` is used instead of the config plugin `position` property.\n *\n * This method is unstable because the position can be set via another native module and get out of sync.\n * Alternatively, you can get the position by measuring the insets returned by `react-native-safe-area-context`.\n *\n * @example\n * ```ts\n * await NavigationBar.unstable_getPositionAsync()\n * ```\n * @returns Navigation bar positional rendering mode. Returns `relative` on unsupported platforms (iOS, web).\n */\nexport async function unstable_getPositionAsync(): Promise<NavigationBarPosition> {\n  if (Platform.OS !== 'android') {\n    console.warn('`unstable_getPositionAsync` is only available on Android');\n    return 'relative';\n  }\n  return await ExpoNavigationBar.unstable_getPositionAsync();\n}\n\n/**\n * Sets the behavior of the status bar and navigation bar when they are hidden and the user wants to reveal them.\n *\n * For example, if the navigation bar is hidden (`setVisibilityAsync(false)`) and the behavior\n * is `'overlay-swipe'`, the user can swipe from the bottom of the screen to temporarily reveal the navigation bar.\n *\n * - `'overlay-swipe'`: Temporarily reveals the System UI after a swipe gesture (bottom or top) without insetting your App's content.\n * - `'inset-swipe'`: Reveals the System UI after a swipe gesture (bottom or top) and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.\n * - `'inset-touch'`: Reveals the System UI after a touch anywhere on the screen and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.\n *\n * @example\n * ```ts\n * await NavigationBar.setBehaviorAsync('overlay-swipe')\n * ```\n * @param behavior Dictates the interaction behavior of the navigation bar.\n */\nexport async function setBehaviorAsync(behavior: NavigationBarBehavior): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setBehaviorAsync` is only available on Android');\n    return;\n  }\n  return await ExpoNavigationBar.setBehaviorAsync(behavior);\n}\n\n/**\n * Gets the behavior of the status and navigation bars when the user swipes or touches the screen.\n *\n * @example\n * ```ts\n * await NavigationBar.getBehaviorAsync()\n * ```\n * @returns Navigation bar interaction behavior. Returns `inset-touch` on unsupported platforms (iOS, web).\n */\nexport async function getBehaviorAsync(): Promise<NavigationBarBehavior> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getBehaviorAsync` is only available on Android');\n    return 'inset-touch';\n  }\n  return await ExpoNavigationBar.getBehaviorAsync();\n}\n\n/**\n * React hook that statefully updates with the visibility of the system navigation bar.\n *\n * @example\n * ```ts\n * function App() {\n *   const visibility = NavigationBar.useVisibility()\n *   // React Component...\n * }\n * ```\n * @returns Visibility of the navigation bar, `null` during async initialization.\n */\nexport function useVisibility(): NavigationBarVisibility | null {\n  const [visibility, setVisible] = useState<NavigationBarVisibility | null>(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    if (Platform.OS !== 'android') {\n      setVisible('hidden');\n      return;\n    }\n    getVisibilityAsync().then((visibility) => {\n      if (isMounted) {\n        setVisible(visibility);\n      }\n    });\n\n    const listener = addVisibilityListener(({ visibility }) => {\n      if (isMounted) {\n        setVisible(visibility);\n      }\n    });\n\n    return () => {\n      listener.remove();\n      isMounted = false;\n    };\n  }, []);\n\n  return visibility;\n}\n\nexport * from './NavigationBar.types';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}