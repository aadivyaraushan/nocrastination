{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar HealthBar = function HealthBar(_ref) {\n  var health = _ref.health,\n      isLower = _ref.isLower;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      bars = _useState2[0],\n      setBars = _useState2[1];\n\n  useEffect(function () {\n    setBars([]);\n    bars = [];\n\n    for (var i = 10; i <= health; i += 10) {\n      var key = Math.random();\n      bars.push(_jsx(View, {\n        style: {\n          backgroundColor: \"#E92720\",\n          width: 30,\n          height: 20,\n          borderColor: \"#000\",\n          borderWidth: 2\n        }\n      }, key));\n      setBars(bars);\n    }\n  }, [health]);\n\n  if (isLower) {\n    return _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(Image, {\n        source: require(\"../assets/regeneration.png\"),\n        style: styles.heart\n      }), _jsx(View, {\n        style: styles.barsContainer,\n        children: bars\n      })]\n    });\n  } else {\n    return _jsxs(View, {\n      style: styles.containerUpper,\n      children: [_jsx(View, {\n        style: styles.barsContainerUpper,\n        children: bars\n      }), _jsx(Image, {\n        source: require(\"../assets/regeneration.png\"),\n        style: styles.heartUpper\n      })]\n    });\n  }\n};\n\nexport default HealthBar;\nvar styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\"\n  },\n  containerUpper: {\n    display: \"flex\",\n    flexDirection: \"row-reverse\",\n    position: \"relative\",\n    top: 150\n  },\n  heart: {\n    width: 30,\n    height: 30,\n    marginLeft: 10,\n    marginBottom: 10\n  },\n  heartUpper: {\n    width: 30,\n    height: 30,\n    marginRight: 10,\n    marginBottom: 10\n  },\n  barsContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    flexDirection: \"row\",\n    zIndex: 1,\n    position: \"absolute\",\n    width: \"100%\",\n    left: 40,\n    top: 2\n  },\n  barsContainerUpper: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    flexDirection: \"row-reverse\",\n    zIndex: 1,\n    position: \"absolute\",\n    width: \"100%\",\n    left: 40,\n    top: 2\n  }\n});","map":{"version":3,"sources":["/home/aadivyaraushan/Documents/GitHub/nocrastination/components/HealthBar.js"],"names":["React","useState","useEffect","HealthBar","health","isLower","bars","setBars","i","key","Math","random","push","backgroundColor","width","height","borderColor","borderWidth","styles","container","require","heart","barsContainer","containerUpper","barsContainerUpper","heartUpper","StyleSheet","create","display","flexDirection","position","top","marginLeft","marginBottom","marginRight","flexWrap","zIndex","left"],"mappings":"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","sourcesContent":["import { StyleSheet, Text, View, Image } from \"react-native\";\nimport React, { useState, useEffect } from \"react\";\n\nconst HealthBar = ({ health, isLower }) => {\n  let [bars, setBars] = useState([]);\n  useEffect(() => {\n    setBars([]);\n    bars = [];\n    for (let i = 10; i <= health; i += 10) {\n      let key = Math.random();\n      bars.push(\n        <View\n          style={{\n            backgroundColor: \"#E92720\",\n            width: 30,\n            height: 20,\n            borderColor: \"#000\",\n            borderWidth: 2,\n          }}\n          key={key}\n        ></View>\n      );\n      setBars(bars);\n    }\n  }, [health]);\n\n  if (isLower) {\n    return (\n      <View style={styles.container}>\n        <Image\n          source={require(\"../assets/regeneration.png\")}\n          style={styles.heart}\n        />\n        <View style={styles.barsContainer}>{bars}</View>\n      </View>\n    );\n  } else {\n    return (\n      <View style={styles.containerUpper}>\n        <View style={styles.barsContainerUpper}>{bars}</View>\n        <Image\n          source={require(\"../assets/regeneration.png\")}\n          style={styles.heartUpper}\n        />\n      </View>\n    );\n  }\n};\n\nexport default HealthBar;\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  containerUpper: {\n    display: \"flex\",\n    flexDirection: \"row-reverse\",\n    position: \"relative\",\n    top: 150,\n  },\n  heart: {\n    width: 30,\n    height: 30,\n    marginLeft: 10,\n    marginBottom: 10,\n  },\n  heartUpper: {\n    width: 30,\n    height: 30,\n    marginRight: 10,\n    marginBottom: 10,\n  },\n  barsContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    flexDirection: \"row\",\n    zIndex: 1,\n    position: \"absolute\",\n    width: \"100%\",\n    left: 40,\n    top: 2,\n  },\n  barsContainerUpper: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    flexDirection: \"row-reverse\",\n    zIndex: 1,\n    position: \"absolute\",\n    width: \"100%\",\n    left: 40,\n    top: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}