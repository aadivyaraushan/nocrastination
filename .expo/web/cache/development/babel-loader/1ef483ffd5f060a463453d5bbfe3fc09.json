{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useContext, useEffect, useState } from \"react\";\nimport Topbar from \"../components/Topbar\";\nimport BottomBar from \"../components/BottomBar\";\nimport { UserContext } from \"../UserContext\";\nimport { QuestContext } from \"../QuestContext\";\nimport { query, collection, where, getDocs, getFirestore } from \"firebase/firestore\";\nimport { useFonts } from \"expo-font\";\nimport { Audio } from \"expo-av\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction Quest(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(UserContext),\n      user = _useContext.user,\n      setUser = _useContext.setUser;\n\n  var _useContext2 = useContext(QuestContext),\n      quest = _useContext2.quest,\n      setQuest = _useContext2.setQuest;\n\n  var _useFonts = useFonts({\n    RetroGaming: require(\"../assets/fonts/RetroGaming-Regular.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      loaded = _useFonts2[0];\n\n  var percentComplete = user[\"questsDone\"] * 50 + \"%\";\n  var db = getFirestore();\n  var q = query(collection(db, \"tasks\"), where(\"owner\", \"==\", user[\"email\"]));\n  var quests = [];\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      arrOfQuestsJSX = _useState2[0],\n      setArrOfQuestsJSX = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      sound = _useState4[0],\n      setSound = _useState4[1];\n\n  function playTap() {\n    var _await$Audio$Sound$cr, sound;\n\n    return _regeneratorRuntime.async(function playTap$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Audio.Sound.createAsync(require(\"../assets/sfx/tap1.mp3\")));\n\n          case 2:\n            _await$Audio$Sound$cr = _context.sent;\n            sound = _await$Audio$Sound$cr.sound;\n            setSound(sound);\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(sound.playAsync());\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    getDocs(q).then(function (querySnapshot) {\n      return querySnapshot.forEach(function (doc) {\n        quests.push(doc.data());\n      });\n    }).then(function () {\n      setArrOfQuestsJSX(_jsx(View, {\n        style: styles.questsGridContainer,\n        children: _jsx(View, {\n          style: styles.questGridContainer,\n          children: quests.map(function (questFromArr, index) {\n            return _jsx(View, {\n              style: styles.boxContainer,\n              children: _jsx(Pressable, {\n                onPress: function onPress() {\n                  setQuest(questFromArr);\n                  playTap();\n                  navigation.navigate(\"questPage\");\n                },\n                children: _jsxs(View, {\n                  style: {\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    width: \"100%\",\n                    height: \"40%\",\n                    alignSelf: \"center\",\n                    marginRight: 20\n                  },\n                  children: [_jsx(View, {\n                    style: styles.textContainer,\n                    children: _jsx(Text, {\n                      style: styles.questText,\n                      children: questFromArr[\"title\"]\n                    }, index)\n                  }), _jsx(Image, {\n                    source: require(\"../assets/buildingIcon.png\"),\n                    style: styles.questBuilding\n                  })]\n                })\n              })\n            }, index);\n          })\n        })\n      }));\n    }).catch(function (reason) {\n      return alert(reason);\n    });\n  }, []);\n  return _jsx(View, {\n    children: _jsxs(ImageBackground, {\n      source: require(\"../assets/background.png\"),\n      style: styles.bg,\n      children: [_jsx(Topbar, {\n        style: styles.topbar\n      }), _jsx(Image, {\n        style: styles.banner,\n        source: require(\"../assets/questsBanner.png\")\n      }), arrOfQuestsJSX, _jsx(BottomBar, {})]\n    })\n  });\n}\n\nvar styles = StyleSheet.create({\n  bg: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"contain\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  banner: {\n    width: \"100%\",\n    resizeMode: \"contain\",\n    position: \"absolute\",\n    top: -5,\n    zIndex: 2\n  },\n  button: {\n    resizeMode: \"contain\",\n    width: 350,\n    top: 100,\n    alignSelf: \"center\",\n    marginBottom: 5\n  },\n  bar: {\n    width: 50,\n    flexDirection: \"column\",\n    height: \"100%\",\n    backgroundColor: \"white\",\n    alignSelf: \"center\",\n    justifyContent: \"center\",\n    top: -1100,\n    position: \"relative\"\n  },\n  sword: {\n    alignSelf: \"center\",\n    resizeMode: \"contain\",\n    width: 100,\n    top: 340,\n    zIndex: 1,\n    position: \"absolute\"\n  },\n  topbar: {\n    zIndex: 2,\n    position: \"absolute\",\n    top: 0\n  },\n  questText: {\n    fontSize: 13,\n    textAlign: \"center\",\n    alignSelf: \"center\",\n    color: \"white\",\n    fontFamily: \"RetroGaming\",\n    flex: 1,\n    flexWrap: \"wrap\"\n  },\n  questBuilding: {\n    marginTop: 10,\n    height: 60,\n    resizeMode: \"contain\",\n    alignSelf: \"center\"\n  },\n  questsGridContainer: {\n    flex: 1,\n    top: 60\n  },\n  questGridContainer: {\n    flex: 1,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    padding: 2\n  },\n  boxContainer: {\n    margin: 2,\n    width: Dimensions.get(\"window\").width / 2 - 6,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  textContainer: {\n    flexDirection: \"row\"\n  }\n});\nexport default Quest;\nLogBox.ignoreLogs([\"Setting a timer for a long period of time\"]);","map":{"version":3,"sources":["/home/aadivyaraushan/Documents/GitHub/nocrastination/screens/Quests.js"],"names":["useContext","useEffect","useState","Topbar","BottomBar","UserContext","QuestContext","query","collection","where","getDocs","getFirestore","useFonts","Audio","Quest","navigation","user","setUser","quest","setQuest","RetroGaming","require","loaded","percentComplete","db","q","quests","arrOfQuestsJSX","setArrOfQuestsJSX","sound","setSound","playTap","Sound","createAsync","playAsync","then","querySnapshot","forEach","doc","push","data","styles","questsGridContainer","questGridContainer","map","questFromArr","index","boxContainer","navigate","display","flexDirection","width","height","alignSelf","marginRight","textContainer","questText","questBuilding","catch","reason","alert","bg","topbar","banner","StyleSheet","create","resizeMode","position","top","zIndex","button","marginBottom","bar","backgroundColor","justifyContent","sword","fontSize","textAlign","color","fontFamily","flex","flexWrap","marginTop","padding","margin","Dimensions","get","alignItems","LogBox","ignoreLogs"],"mappings":";;;;;;;;;;;;AAYA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,OAAOC,MAAP;AACA,OAAOC,SAAP;AACA,SAASC,WAAT;AACA,SAASC,YAAT;AACA,SACEC,KADF,EAEEC,UAFF,EAGEC,KAHF,EAIEC,OAJF,EAKEC,YALF,QAMO,oBANP;AAOA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,KAAT,QAAsB,SAAtB;;;;AAEA,SAASC,KAAT,OAA+B;AAAA,MAAdC,UAAc,QAAdA,UAAc;;AAC7B,oBAA0Bf,UAAU,CAACK,WAAD,CAApC;AAAA,MAAQW,IAAR,eAAQA,IAAR;AAAA,MAAcC,OAAd,eAAcA,OAAd;;AACA,qBAA4BjB,UAAU,CAACM,YAAD,CAAtC;AAAA,MAAQY,KAAR,gBAAQA,KAAR;AAAA,MAAeC,QAAf,gBAAeA,QAAf;;AACA,kBAAiBP,QAAQ,CAAC;AACxBQ,IAAAA,WAAW,EAAEC,OAAO;AADI,GAAD,CAAzB;AAAA;AAAA,MAAOC,MAAP;;AAGA,MAAMC,eAAe,GAAGP,IAAI,CAAC,YAAD,CAAJ,GAAqB,EAArB,GAA0B,GAAlD;AACA,MAAMQ,EAAE,GAAGb,YAAY,EAAvB;AACA,MAAMc,CAAC,GAAGlB,KAAK,CAACC,UAAU,CAACgB,EAAD,EAAK,OAAL,CAAX,EAA0Bf,KAAK,CAAC,OAAD,EAAU,IAAV,EAAgBO,IAAI,CAAC,OAAD,CAApB,CAA/B,CAAf;AACA,MAAMU,MAAM,GAAG,EAAf;;AACA,kBAA4CxB,QAAQ,EAApD;AAAA;AAAA,MAAOyB,cAAP;AAAA,MAAuBC,iBAAvB;;AACA,mBAA0B1B,QAAQ,EAAlC;AAAA;AAAA,MAAO2B,KAAP;AAAA,MAAcC,QAAd;;AACA,WAAeC,OAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAC0BlB,KAAK,CAACmB,KAAN,CAAYC,WAAZ,CACtBZ,OAAO,0BADe,CAD1B;;AAAA;AAAA;AACUQ,YAAAA,KADV,yBACUA,KADV;AAIEC,YAAAA,QAAQ,CAACD,KAAD,CAAR;AAJF;AAAA,6CAKQA,KAAK,CAACK,SAAN,EALR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQAjC,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,OAAO,CAACe,CAAD,CAAP,CACGU,IADH,CACQ,UAACC,aAAD;AAAA,aACJA,aAAa,CAACC,OAAd,CAAsB,UAACC,GAAD,EAAS;AAC7BZ,QAAAA,MAAM,CAACa,IAAP,CAAYD,GAAG,CAACE,IAAJ,EAAZ;AACD,OAFD,CADI;AAAA,KADR,EAMGL,IANH,CAMQ,YAAM;AA8CVP,MAAAA,iBAAiB,CACf,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEa,MAAM,CAACC,mBAApB;AAAA,kBACE,KAAC,IAAD;AAAM,UAAA,KAAK,EAAED,MAAM,CAACE,kBAApB;AAAA,oBACGjB,MAAM,CAACkB,GAAP,CAAW,UAACC,YAAD,EAAeC,KAAf,EAAyB;AACnC,mBACE,KAAC,IAAD;AAAM,cAAA,KAAK,EAAEL,MAAM,CAACM,YAApB;AAAA,wBACE,KAAC,SAAD;AACE,gBAAA,OAAO,EAAE,mBAAM;AACb5B,kBAAAA,QAAQ,CAAC0B,YAAD,CAAR;AACAd,kBAAAA,OAAO;AACPhB,kBAAAA,UAAU,CAACiC,QAAX,CAAoB,WAApB;AACD,iBALH;AAAA,0BAOE,MAAC,IAAD;AACE,kBAAA,KAAK,EAAE;AACLC,oBAAAA,OAAO,EAAE,MADJ;AAELC,oBAAAA,aAAa,EAAE,QAFV;AAGLC,oBAAAA,KAAK,EAAE,MAHF;AAILC,oBAAAA,MAAM,EAAE,KAJH;AAKLC,oBAAAA,SAAS,EAAE,QALN;AAMLC,oBAAAA,WAAW,EAAE;AANR,mBADT;AAAA,6BAUE,KAAC,IAAD;AAAM,oBAAA,KAAK,EAAEb,MAAM,CAACc,aAApB;AAAA,8BACE,KAAC,IAAD;AAAkB,sBAAA,KAAK,EAAEd,MAAM,CAACe,SAAhC;AAAA,gCACGX,YAAY,CAAC,OAAD;AADf,uBAAWC,KAAX;AADF,oBAVF,EAeE,KAAC,KAAD;AACE,oBAAA,MAAM,EAAEzB,OAAO,8BADjB;AAEE,oBAAA,KAAK,EAAEoB,MAAM,CAACgB;AAFhB,oBAfF;AAAA;AAPF;AADF,eAAuCX,KAAvC,CADF;AAgCD,WAjCA;AADH;AADF,QADe,CAAjB;AAwCD,KA5FH,EA6FGY,KA7FH,CA6FS,UAACC,MAAD;AAAA,aAAYC,KAAK,CAACD,MAAD,CAAjB;AAAA,KA7FT;AA8FD,GA/FQ,EA+FN,EA/FM,CAAT;AAiGA,SACE,KAAC,IAAD;AAAA,cACE,MAAC,eAAD;AACE,MAAA,MAAM,EAAEtC,OAAO,4BADjB;AAEE,MAAA,KAAK,EAAEoB,MAAM,CAACoB,EAFhB;AAAA,iBAIE,KAAC,MAAD;AAAQ,QAAA,KAAK,EAAEpB,MAAM,CAACqB;AAAtB,QAJF,EAKE,KAAC,KAAD;AACE,QAAA,KAAK,EAAErB,MAAM,CAACsB,MADhB;AAEE,QAAA,MAAM,EAAE1C,OAAO;AAFjB,QALF,EASGM,cATH,EAUE,KAAC,SAAD,KAVF;AAAA;AADF,IADF;AAgBD;;AAED,IAAMc,MAAM,GAAGuB,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,EAAE,EAAE;AACFV,IAAAA,KAAK,EAAE,MADL;AAEFC,IAAAA,MAAM,EAAE,MAFN;AAGFc,IAAAA,UAAU,EAAE,SAHV;AAIFjB,IAAAA,OAAO,EAAE,MAJP;AAKFC,IAAAA,aAAa,EAAE;AALb,GAD2B;AAQ/Ba,EAAAA,MAAM,EAAE;AACNZ,IAAAA,KAAK,EAAE,MADD;AAENe,IAAAA,UAAU,EAAE,SAFN;AAGNC,IAAAA,QAAQ,EAAE,UAHJ;AAINC,IAAAA,GAAG,EAAE,CAAC,CAJA;AAKNC,IAAAA,MAAM,EAAE;AALF,GARuB;AAe/BC,EAAAA,MAAM,EAAE;AACNJ,IAAAA,UAAU,EAAE,SADN;AAENf,IAAAA,KAAK,EAAE,GAFD;AAGNiB,IAAAA,GAAG,EAAE,GAHC;AAINf,IAAAA,SAAS,EAAE,QAJL;AAKNkB,IAAAA,YAAY,EAAE;AALR,GAfuB;AAsB/BC,EAAAA,GAAG,EAAE;AACHrB,IAAAA,KAAK,EAAE,EADJ;AAEHD,IAAAA,aAAa,EAAE,QAFZ;AAGHE,IAAAA,MAAM,EAAE,MAHL;AAIHqB,IAAAA,eAAe,EAAE,OAJd;AAKHpB,IAAAA,SAAS,EAAE,QALR;AAMHqB,IAAAA,cAAc,EAAE,QANb;AAOHN,IAAAA,GAAG,EAAE,CAAC,IAPH;AAQHD,IAAAA,QAAQ,EAAE;AARP,GAtB0B;AAgC/BQ,EAAAA,KAAK,EAAE;AACLtB,IAAAA,SAAS,EAAE,QADN;AAELa,IAAAA,UAAU,EAAE,SAFP;AAGLf,IAAAA,KAAK,EAAE,GAHF;AAILiB,IAAAA,GAAG,EAAE,GAJA;AAKLC,IAAAA,MAAM,EAAE,CALH;AAMLF,IAAAA,QAAQ,EAAE;AANL,GAhCwB;AAwC/BL,EAAAA,MAAM,EAAE;AACNO,IAAAA,MAAM,EAAE,CADF;AAENF,IAAAA,QAAQ,EAAE,UAFJ;AAGNC,IAAAA,GAAG,EAAE;AAHC,GAxCuB;AA6C/BZ,EAAAA,SAAS,EAAE;AACToB,IAAAA,QAAQ,EAAE,EADD;AAETC,IAAAA,SAAS,EAAE,QAFF;AAGTxB,IAAAA,SAAS,EAAE,QAHF;AAITyB,IAAAA,KAAK,EAAE,OAJE;AAKTC,IAAAA,UAAU,EAAE,aALH;AAMTC,IAAAA,IAAI,EAAE,CANG;AAOTC,IAAAA,QAAQ,EAAE;AAPD,GA7CoB;AAsD/BxB,EAAAA,aAAa,EAAE;AACbyB,IAAAA,SAAS,EAAE,EADE;AAEb9B,IAAAA,MAAM,EAAE,EAFK;AAGbc,IAAAA,UAAU,EAAE,SAHC;AAIbb,IAAAA,SAAS,EAAE;AAJE,GAtDgB;AA4D/BX,EAAAA,mBAAmB,EAAE;AACnBsC,IAAAA,IAAI,EAAE,CADa;AAEnBZ,IAAAA,GAAG,EAAE;AAFc,GA5DU;AAgE/BzB,EAAAA,kBAAkB,EAAE;AAClBqC,IAAAA,IAAI,EAAE,CADY;AAElB9B,IAAAA,aAAa,EAAE,KAFG;AAGlB+B,IAAAA,QAAQ,EAAE,MAHQ;AAIlBE,IAAAA,OAAO,EAAE;AAJS,GAhEW;AAsE/BpC,EAAAA,YAAY,EAAE;AACZqC,IAAAA,MAAM,EAAE,CADI;AAEZjC,IAAAA,KAAK,EAAEkC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBnC,KAAzB,GAAiC,CAAjC,GAAqC,CAFhC;AAGZuB,IAAAA,cAAc,EAAE,QAHJ;AAIZa,IAAAA,UAAU,EAAE;AAJA,GAtEiB;AA4E/BhC,EAAAA,aAAa,EAAE;AACbL,IAAAA,aAAa,EAAE;AADF;AA5EgB,CAAlB,CAAf;AAiFA,eAAepC,KAAf;AACA0E,MAAM,CAACC,UAAP,CAAkB,CAAC,2CAAD,CAAlB","sourcesContent":["import {\n  View,\n  Text,\n  ImageBackground,\n  Image,\n  StyleSheet,\n  Pressable,\n  Animated,\n  LogBox,\n  ScrollView,\n  Dimensions,\n} from \"react-native\";\nimport { useContext, useEffect, useState } from \"react\";\nimport Topbar from \"../components/Topbar\";\nimport BottomBar from \"../components/BottomBar\";\nimport { UserContext } from \"../UserContext\";\nimport { QuestContext } from \"../QuestContext\";\nimport {\n  query,\n  collection,\n  where,\n  getDocs,\n  getFirestore,\n} from \"firebase/firestore\";\nimport { useFonts } from \"expo-font\";\nimport { Audio } from \"expo-av\";\n\nfunction Quest({ navigation }) {\n  const { user, setUser } = useContext(UserContext);\n  const { quest, setQuest } = useContext(QuestContext);\n  const [loaded] = useFonts({\n    RetroGaming: require(\"../assets/fonts/RetroGaming-Regular.ttf\"),\n  });\n  const percentComplete = user[\"questsDone\"] * 50 + \"%\";\n  const db = getFirestore();\n  const q = query(collection(db, \"tasks\"), where(\"owner\", \"==\", user[\"email\"]));\n  const quests = [];\n  const [arrOfQuestsJSX, setArrOfQuestsJSX] = useState();\n  const [sound, setSound] = useState();\n  async function playTap() {\n    const { sound } = await Audio.Sound.createAsync(\n      require(\"../assets/sfx/tap1.mp3\")\n    );\n    setSound(sound);\n    await sound.playAsync();\n  }\n\n  useEffect(() => {\n    getDocs(q)\n      .then((querySnapshot) =>\n        querySnapshot.forEach((doc) => {\n          quests.push(doc.data());\n        })\n      )\n      .then(() => {\n        // setArrOfQuestsJSX(\n        //   <ScrollView\n        //     style={{\n        //       // backgroundColor: \"black\",\n        //       width: \"100%\",\n        //       height: \"70%\",\n        //     }}\n        //     contentContainerStyle={{\n        //       justifyContent: \"center\",\n        //       alignItems: \"center\",\n        //     }}\n        //     horizontal={true}\n        //   >\n        //     {quests.map((questFromArr, index) => (\n        //       <Pressable\n        //         onPress={() => {\n        //           setQuest(questFromArr);\n        //           // alert(\"Quest navigating to...\\n\" + quest[\"title\"]);\n        //           playTap();\n        //           navigation.navigate(\"questPage\");\n        //         }}\n        //         android_disableSound={true}\n        //       >\n        //         <View\n        //           style={{\n        //             display: \"flex\",\n        //             flexDirection: \"column\",\n        //             width: \"100%\",\n        //             height: \"40%\",\n        //             alignSelf: \"center\",\n        //             marginRight: 20,\n        //           }}\n        //         >\n        //           <Text key={index} style={styles.questText}>\n        //             {questFromArr[\"title\"]}\n        //           </Text>\n        //           <Image\n        //             source={require(\"../assets/buildingIcon.png\")}\n        //             style={styles.questBuilding}\n        //           />\n        //         </View>\n        //       </Pressable>\n        //     ))}\n        //   </ScrollView>\n        // );\n        setArrOfQuestsJSX(\n          <View style={styles.questsGridContainer}>\n            <View style={styles.questGridContainer}>\n              {quests.map((questFromArr, index) => {\n                return (\n                  <View style={styles.boxContainer} key={index}>\n                    <Pressable\n                      onPress={() => {\n                        setQuest(questFromArr);\n                        playTap();\n                        navigation.navigate(\"questPage\");\n                      }}\n                    >\n                      <View\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"column\",\n                          width: \"100%\",\n                          height: \"40%\",\n                          alignSelf: \"center\",\n                          marginRight: 20,\n                        }}\n                      >\n                        <View style={styles.textContainer}>\n                          <Text key={index} style={styles.questText}>\n                            {questFromArr[\"title\"]}\n                          </Text>\n                        </View>\n                        <Image\n                          source={require(\"../assets/buildingIcon.png\")}\n                          style={styles.questBuilding}\n                        />\n                      </View>\n                    </Pressable>\n                  </View>\n                );\n              })}\n            </View>\n          </View>\n        );\n      })\n      .catch((reason) => alert(reason));\n  }, []);\n\n  return (\n    <View>\n      <ImageBackground\n        source={require(\"../assets/background.png\")}\n        style={styles.bg}\n      >\n        <Topbar style={styles.topbar} />\n        <Image\n          style={styles.banner}\n          source={require(\"../assets/questsBanner.png\")}\n        />\n        {arrOfQuestsJSX}\n        <BottomBar />\n      </ImageBackground>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  bg: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"contain\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  banner: {\n    width: \"100%\",\n    resizeMode: \"contain\",\n    position: \"absolute\",\n    top: -5,\n    zIndex: 2,\n  },\n  button: {\n    resizeMode: \"contain\",\n    width: 350,\n    top: 100,\n    alignSelf: \"center\",\n    marginBottom: 5,\n  },\n  bar: {\n    width: 50,\n    flexDirection: \"column\",\n    height: \"100%\",\n    backgroundColor: \"white\",\n    alignSelf: \"center\",\n    justifyContent: \"center\",\n    top: -1100,\n    position: \"relative\",\n  },\n  sword: {\n    alignSelf: \"center\",\n    resizeMode: \"contain\",\n    width: 100,\n    top: 340,\n    zIndex: 1,\n    position: \"absolute\",\n  },\n  topbar: {\n    zIndex: 2,\n    position: \"absolute\",\n    top: 0,\n  },\n  questText: {\n    fontSize: 13,\n    textAlign: \"center\",\n    alignSelf: \"center\",\n    color: \"white\",\n    fontFamily: \"RetroGaming\",\n    flex: 1,\n    flexWrap: \"wrap\",\n  },\n  questBuilding: {\n    marginTop: 10,\n    height: 60,\n    resizeMode: \"contain\",\n    alignSelf: \"center\",\n  },\n  questsGridContainer: {\n    flex: 1,\n    top: 60,\n  },\n  questGridContainer: {\n    flex: 1,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    padding: 2,\n  },\n  boxContainer: {\n    margin: 2,\n    width: Dimensions.get(\"window\").width / 2 - 6,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  textContainer: {\n    flexDirection: \"row\",\n  },\n});\n\nexport default Quest;\nLogBox.ignoreLogs([\"Setting a timer for a long period of time\"]);\n"]},"metadata":{},"sourceType":"module"}