{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport React from \"react\";\nimport Topbar from \"../components/Topbar\";\nimport BottomBar from \"../components/BottomBar\";\nimport { useContext, useEffect, useState } from \"react/cjs/react.development\";\nimport { UserContext } from \"../UserContext\";\nimport { QuestContext } from \"../QuestContext\";\nimport { doc, getDoc, updateDoc } from \"@firebase/firestore\";\nimport { db } from \"../firebase\";\nimport { Audio } from \"expo-av\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar PickATask = function PickATask(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(UserContext),\n      user = _useContext.user,\n      setUser = _useContext.setUser;\n\n  var _useContext2 = useContext(QuestContext),\n      quest = _useContext2.quest,\n      setQuest = _useContext2.setQuest;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      sound = _useState2[0],\n      setSound = _useState2[1];\n\n  function playSelect() {\n    var _await$Audio$Sound$cr, sound;\n\n    return _regeneratorRuntime.async(function playSelect$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Audio.Sound.createAsync(require(\"../assets/sfx/tap2.mp3\")));\n\n          case 2:\n            _await$Audio$Sound$cr = _context.sent;\n            sound = _await$Audio$Sound$cr.sound;\n            setSound(sound);\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(sound.playAsync());\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var pressHandler = function pressHandler(taskTitle) {\n    playSelect();\n    getDoc(doc(db, \"tasks\", taskTitle)).then(function (task) {\n      var questTemp = task.data();\n      updateDoc(doc(db, \"users\", user[\"email\"]), {\n        activeQuest: questTemp\n      }).then(function () {\n        setQuest(questTemp);\n      }).then(function () {\n        setUser({\n          activeQuest: questTemp,\n          avatar: user[\"avatar\"],\n          coins: user[\"coins\"],\n          currentXp: user[\"currentXp\"],\n          diamonds: user[\"diamonds\"],\n          displayName: user[\"displayName\"],\n          email: user[\"email\"],\n          emotes: user[\"emotes\"],\n          items: user[\"items\"],\n          level: user[\"level\"],\n          multiplier: user[\"multiplier\"],\n          questsDone: user[\"questsDone\"],\n          tasks: user[\"tasks\"]\n        });\n      }).then(function () {\n        navigation.navigate(\"matchmakingSelect\");\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    });\n  };\n\n  return _jsx(View, {\n    children: _jsxs(ImageBackground, {\n      source: require(\"../assets/background.png\"),\n      style: styles.bg,\n      children: [_jsx(Topbar, {}), _jsx(View, {\n        style: styles.banner,\n        children: _jsx(Text, {\n          style: styles.bannerText,\n          children: \"Pick a quest to complete\"\n        })\n      }), _jsx(ScrollView, {\n        style: styles.tasksContainer,\n        children: user[\"tasks\"].map(function (task, index) {\n          return _jsx(Pressable, {\n            style: styles.taskContainer,\n            onPress: function onPress() {\n              return pressHandler(task);\n            },\n            android_disableSound: true,\n            children: _jsx(Text, {\n              style: styles.tasksText,\n              children: task\n            })\n          }, index);\n        })\n      }), _jsx(BottomBar, {})]\n    })\n  });\n};\n\nexport default PickATask;\nvar styles = StyleSheet.create({\n  bg: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"contain\",\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  banner: {\n    marginTop: 50,\n    backgroundColor: \"#DD4141\",\n    width: \"100%\"\n  },\n  bannerText: {\n    fontSize: 40,\n    fontFamily: \"RetroGaming\",\n    color: \"white\",\n    textAlign: \"center\"\n  },\n  tasksText: {\n    fontSize: 20,\n    fontFamily: \"RetroGaming\",\n    color: \"white\",\n    textAlign: \"center\"\n  },\n  tasksContainer: {\n    display: \"flex\",\n    backgroundColor: \"#04151F\",\n    width: 300,\n    height: 200,\n    marginTop: 25\n  },\n  taskContainer: {\n    backgroundColor: \"#072536\",\n    width: 300,\n    height: \"auto\",\n    marginBottom: 5\n  }\n});","map":{"version":3,"sources":["/home/aadivyaraushan/Documents/GitHub/nocrastination/screens/TaskSelect.js"],"names":["React","Topbar","BottomBar","useContext","useEffect","useState","UserContext","QuestContext","doc","getDoc","updateDoc","db","Audio","PickATask","navigation","user","setUser","quest","setQuest","sound","setSound","playSelect","Sound","createAsync","require","playAsync","pressHandler","taskTitle","then","task","questTemp","data","activeQuest","avatar","coins","currentXp","diamonds","displayName","email","emotes","items","level","multiplier","questsDone","tasks","navigate","catch","err","console","log","styles","bg","banner","bannerText","tasksContainer","map","index","taskContainer","tasksText","StyleSheet","create","width","height","resizeMode","display","alignItems","marginTop","backgroundColor","fontSize","fontFamily","color","textAlign","marginBottom"],"mappings":"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","sourcesContent":["import {\n  ImageBackground,\n  ScrollView,\n  StyleSheet,\n  Text,\n  View,\n  Pressable,\n} from \"react-native\";\nimport React from \"react\";\nimport Topbar from \"../components/Topbar\";\nimport BottomBar from \"../components/BottomBar\";\nimport { useContext, useEffect, useState } from \"react/cjs/react.development\";\nimport { UserContext } from \"../UserContext\";\nimport { QuestContext } from \"../QuestContext\";\nimport { doc, getDoc, updateDoc } from \"@firebase/firestore\";\nimport { db } from \"../firebase\";\nimport { Audio } from \"expo-av\";\n\nconst PickATask = ({ navigation }) => {\n  const { user, setUser } = useContext(UserContext);\n  const { quest, setQuest } = useContext(QuestContext);\n  const [sound, setSound] = useState();\n\n  async function playSelect() {\n    const { sound } = await Audio.Sound.createAsync(\n      require(\"../assets/sfx/tap2.mp3\")\n    );\n    setSound(sound);\n    await sound.playAsync();\n  }\n\n  const pressHandler = (taskTitle) => {\n    playSelect();\n    getDoc(doc(db, \"tasks\", taskTitle)).then((task) => {\n      const questTemp = task.data();\n      updateDoc(doc(db, \"users\", user[\"email\"]), {\n        activeQuest: questTemp,\n      })\n        .then(() => {\n          setQuest(questTemp);\n        })\n        .then(() => {\n          setUser({\n            activeQuest: questTemp,\n            avatar: user[\"avatar\"],\n            coins: user[\"coins\"],\n            currentXp: user[\"currentXp\"],\n            diamonds: user[\"diamonds\"],\n            displayName: user[\"displayName\"],\n            email: user[\"email\"],\n            emotes: user[\"emotes\"],\n            items: user[\"items\"],\n            level: user[\"level\"],\n            multiplier: user[\"multiplier\"],\n            questsDone: user[\"questsDone\"],\n            tasks: user[\"tasks\"],\n          });\n        })\n        .then(() => {\n          navigation.navigate(\"matchmakingSelect\");\n        })\n        .catch((err) => console.log(err));\n    });\n  };\n\n  return (\n    <View>\n      <ImageBackground\n        source={require(\"../assets/background.png\")}\n        style={styles.bg}\n      >\n        <Topbar />\n        <View style={styles.banner}>\n          <Text style={styles.bannerText}>Pick a quest to complete</Text>\n        </View>\n        <ScrollView style={styles.tasksContainer}>\n          {user[\"tasks\"].map((task, index) => {\n            return (\n              <Pressable\n                style={styles.taskContainer}\n                key={index}\n                onPress={() => pressHandler(task)}\n                android_disableSound={true}\n              >\n                <Text style={styles.tasksText}>{task}</Text>\n              </Pressable>\n            );\n          })}\n        </ScrollView>\n        <BottomBar />\n      </ImageBackground>\n    </View>\n  );\n};\n\nexport default PickATask;\n\nconst styles = StyleSheet.create({\n  bg: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"contain\",\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  banner: {\n    marginTop: 50,\n    backgroundColor: \"#DD4141\",\n    width: \"100%\",\n  },\n  bannerText: {\n    fontSize: 40,\n    fontFamily: \"RetroGaming\",\n    color: \"white\",\n    textAlign: \"center\",\n  },\n  tasksText: {\n    fontSize: 20,\n    fontFamily: \"RetroGaming\",\n    color: \"white\",\n    textAlign: \"center\",\n  },\n  tasksContainer: {\n    display: \"flex\",\n    backgroundColor: \"#04151F\",\n    width: 300,\n    height: 200,\n    marginTop: 25,\n  },\n  taskContainer: {\n    backgroundColor: \"#072536\",\n    width: 300,\n    height: \"auto\",\n    marginBottom: 5,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}